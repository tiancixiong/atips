"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[409],{4065:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a3490c16",path:"/java/container/collection/java-collection-arraylist.html",title:"Collection - ArrayList",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据结构",slug:"数据结构",children:[{level:3,title:"底层数据结构",slug:"底层数据结构",children:[]}]},{level:2,title:"构造函数",slug:"构造函数",children:[]},{level:2,title:"扩容方式",slug:"扩容方式",children:[{level:3,title:"System.arraycopy",slug:"system-arraycopy",children:[]}]},{level:2,title:"插入",slug:"插入",children:[{level:3,title:"普通插入",slug:"普通插入",children:[]},{level:3,title:"指定位置插入",slug:"指定位置插入",children:[]}]},{level:2,title:"删除",slug:"删除",children:[]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"java/container/collection/java-collection-arraylist.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2}]}}},8855:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var p=a(6252);const e=(0,p.uE)('<h1 id="collection-arraylist" tabindex="-1"><a class="header-anchor" href="#collection-arraylist" aria-hidden="true">#</a> Collection - ArrayList</h1><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><p><em>ArrayList</em> = Array + List = 数组 + 列表 = 数组列表</p><p><em>ArrayList</em> 实现了 <em>List</em> 接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入 <code>null</code> 元素，底层通过<strong>数组实现</strong>。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/image-20211020091551051.png" alt="image-20211020091551051"></p><h3 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构" aria-hidden="true">#</a> 底层数据结构</h3><p>ArrayList 的底层是一个 Object 数组</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>elementData 使用 <code>transient</code> 修饰的目的是为了节省空间。</p>',9),t=(0,p.Uk)("elementData 数组相当于容器，当容器不足时就会再扩充容量，但是容器的容量往往都是大于或者等于ArrayList所存元素的个数。 比如，现在实际有了 8 个元素，那么 elementData 数组的容量可能是8x1.5=12，如果直接序列化 elementData 数组，那么就会浪费 4 个元素的空间，特别是当元素个数非常多时，这种浪费是非常不合算的。所以 ArrayList 的设计者将 elementData 设计为 transient，然后在 writeObject 方法中手动将其序列化，并且只序列化了实际存储的那些元素，而不是整个数组。参考："),o={href:"https://www.cnblogs.com/aoguren/p/4767309.html",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("ArrayList序列化技术细节详解"),l=(0,p._)("hr",null,null,-1),i=(0,p.Uk)("实现 Serilizable 接口后，将不需要序列化的属性前添加关键字 "),u=(0,p._)("code",null,"transient",-1),r=(0,p.Uk)("，序列化对象的时候，这个属性就不会序列化到指定的目的地中。参考："),k={href:"https://www.cnblogs.com/lanxuezaipiao/p/3369962.html",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("Java transient关键字使用小记"),m=(0,p.uE)('<h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><p>ArrayList 提供了三种方式的构造器：</p><ul><li><p><code>ArrayList()</code> - 可以构造一个默认初始容量为 10 的空 list；</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><code>ArrayList(int initialCapacity)</code> - 构造一个指定初始容量 <code>initialCapacity</code> 的空 list；</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList</span>\n<span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal Capacity: &quot;</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><code>ArrayList(Collection&lt;? extends E&gt; c)</code> - 构造一个包含指定 Collection 的元素的 list。</p></li></ul><h2 id="扩容方式" tabindex="-1"><a class="header-anchor" href="#扩容方式" aria-hidden="true">#</a> 扩容方式</h2><p>扩容操作最终是通过 <code>grow()</code> 方法完成的。得到的新容量等于旧容量的 1.5 倍。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>\n    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    modCount<span class="token operator">++</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// overflow-conscious code</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// overflow-conscious code</span>\n    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>\n    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/image-20211020095730582.png" alt="image-20211020095730582"></p><p>图中介绍了当 List 结合可用空间长度不足时则需要扩容，在 ArrayList 中主要包括如下步骤：</p><ol><li><p>判断长度充足：<code>ensureCapacityInternal(size + 1);</code>；</p></li><li><p>当判断长度不足时，则通过扩大函数，进行扩容：<code>grow(int minCapacity)</code>；</p></li><li><p>扩容的长度计算：<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>，旧容量 + 旧容量右移1位，这相当于扩容了原来容量的 (int) <code>3/2 = 1.5</code> 倍 ；</p></li><li><p>当扩容完以后，就需要进行把数组中的数据拷贝到新数组中，这个过程会用到 <code>Arrays.copyOf(elementData, newCapacity);</code>，但他的底层用到的是：<code>System.arraycopy</code></p></li></ol><hr><p>ArrayList 扩容时计算新长度的方式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList#grow()</span>\n<span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 若 oldCapacity 十进制数为 10</span>\n<span class="token comment">// int newCapacity = 10 + (10&gt;&gt;1) = 10+5 = 15;</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里 oldCapacity 的十进制数若为 10，其二进制是 <code>1010</code>；然后计算 <code>oldCapacity &gt;&gt; 1</code> 得到二进制 <code>101</code>，十进制数为 5。</p><h3 id="system-arraycopy" tabindex="-1"><a class="header-anchor" href="#system-arraycopy" aria-hidden="true">#</a> System.arraycopy</h3><p>当 ArrayList 扩容完以后，就需要通过 <code>Arrays.copyOf</code> 把数组中的数据拷贝到新数组中，其底层用到的是：<code>System. arraycopy</code>。</p><p>下面通过一个例子了解下 <code>System. arraycopy</code> 的使用，这个例子模拟了 ArrayList 元素迁移的效果：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_arraycopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>oldArr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token punctuation">(</span>oldArr<span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    newArr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>\n    newArr<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>\n    newArr<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>\n    newArr<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数组元素：&quot;</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组元素：[1,2,3,4,5,6,7,8,9,10,0,11,12,13,14]</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数组长度：&quot;</span> <span class="token operator">+</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组长度：15</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>拷贝数组的过程并不复杂，主要是对 <code>System.arraycopy</code> 的操作；</li><li>上面就是把数组 oldArr 拷贝到 newArr ，同时新数组的长度，采用和 ArrayList 一样的计算逻辑：<code>oldArr.length + (oldArr.length &gt;&gt; 1)</code>。</li></ul><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h2><h3 id="普通插入" tabindex="-1"><a class="header-anchor" href="#普通插入" aria-hidden="true">#</a> 普通插入</h3><p>使用 <code>add()</code> 进行元素的插入，其实就是对数组的操作，只不过需要特定时候扩容。源码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>\n\telementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>插入元素时， <code>size++</code> 自增，把对应元素添加进去。</p><h3 id="指定位置插入" tabindex="-1"><a class="header-anchor" href="#指定位置插入" aria-hidden="true">#</a> 指定位置插入</h3><p>使用 <code>add(int index, E element)</code> 可以指定位置进行插入元素操作。</p><hr><p>下面，我们通过一个例子来了解一下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码执行到 <code>list.add(2, &quot;1&quot;);</code> 时报错，输出结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.IndexOutOfBoundsException: Index: <span class="token number">2</span>, Size: <span class="token number">0</span>\n\tat java.util.ArrayList.rangeCheckForAdd<span class="token punctuation">(</span>ArrayList.java:665<span class="token punctuation">)</span>\n\tat java.util.ArrayList.add<span class="token punctuation">(</span>ArrayList.java:477<span class="token punctuation">)</span>\n\tat com.example.demo.ListDemo.main<span class="token punctuation">(</span>ListDemo.java:13<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>为什么会报错呢？看下插入源码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断是否可以插入，索引是否越界</span>\n\t<span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 判断是否需要扩容以及扩容操作</span>\n\t<span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>\n    <span class="token comment">// 数据拷贝迁移，把待插入位置空出来</span>\n\t<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\t\t\t\t\t size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 数据插入操作</span>\n\telementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>\n\tsize<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="容量验证" tabindex="-1"><a class="header-anchor" href="#容量验证" aria-hidden="true">#</a> 容量验证</h4><p><code>rangeCheckForAdd()</code></p><ul><li>指定位置插入首先要通过 <code>rangeCheckForAdd</code> 判断 size（size为ArrayList包含的元素数） 的长度；</li><li>每插入一个元素， size 自增一次 <code>size++</code>；所有在执行 <code>list.add(2, &quot;1&quot;);</code> 时 size 的值还是 <strong>0</strong>；</li><li>所以即使我们申请了 10 个容量长度的 ArrayList ，但是指定位置插入会依赖于 <code>size</code> 进行判断；进行判断时 index 为 2，而 size 为 0。所以会抛出 <em>IndexOutOfBoundsException</em> 异常。</li></ul><h4 id="元素迁移" tabindex="-1"><a class="header-anchor" href="#元素迁移" aria-hidden="true">#</a> 元素迁移</h4><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/image-20211020161643231.png" alt="image-20211020161643231"></p><p>指定位置插入的核心步骤包括：</p><ol><li>判断 size 是否可以插入：<code>rangeCheckForAdd(index);</code>；</li><li>判断插入后是否需要扩容：<code>ensureCapacityInternal(size + 1);</code>；</li><li>通过 <code>System.arraycopy</code> 进行数据元素迁移，把从待插入位置后的元素，顺序往后迁移；</li><li>给数组的指定位置赋值，也就是把待插入元素插入进来。</li></ol><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><p><em>ArrayList</em> 中提供的 remove 方法有：</p><ul><li><code>remove(int index)</code> 删除指定位置的元素；</li><li><code>remove(Object o)</code> 删除第一个满足 <code>o.equals(elementData[index])</code> 的元素。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.ArrayList</span>\n<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\tmodCount<span class="token operator">++</span><span class="token punctuation">;</span>\n\t<span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>\n\t\t\t\t\t\t numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\telementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>\n\n\t<span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/image-20211020164233475.png" alt="image-20211020164233475"> 结合上图理解，通过 <code>remove(int index)</code> 删除的过程主要包括：</p><ol><li>校验是否越界：<code>rangeCheck(index);</code>；</li><li>计算删除元素时需移动元素的数量 numMoved（将后面所有的元素向前移动的距离）；并通过 <code>System.arraycopy</code> 将自己所有需移动的元素（即删除节点后面所有的元素，不包含删除节点本身）复制到以删除节点开始的位置上；</li><li>此时结尾元素还是原来的值，需把结尾元素清空（为了让 <em>GC</em> 起作用，必须显式的为最后一个位置赋 <code>null</code> 值）。</li></ol><blockquote><p>关于 Java GC 这里需要特别说明一下，<strong>有了垃圾收集器并不意味着一定不会有内存泄漏</strong>。对象能否被 GC 的依据是是否还有引用指向它，上面代码中如果不手动赋 <code>null</code> 值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p></blockquote><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>《Java 面经手册》- 小傅哥</li></ul>',48),b={},y=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("blockquote",null,[(0,p._)("p",null,[t,(0,p._)("a",o,[c,(0,p.Wm)(a)])])]),l,(0,p._)("p",null,[i,u,r,(0,p._)("a",k,[d,(0,p.Wm)(a)])]),m],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);