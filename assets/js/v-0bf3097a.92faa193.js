"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[2491],{9116:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-0bf3097a",path:"/database/mysql/mysql-master-slave.html",title:"MySQL - 主从复制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是主从复制？",slug:"什么是主从复制",children:[]},{level:2,title:"主从复制的原理",slug:"主从复制的原理",children:[]},{level:2,title:"基于Docker搭建",slug:"基于docker搭建",children:[{level:3,title:"主实例搭建",slug:"主实例搭建",children:[]},{level:3,title:"从实例搭建",slug:"从实例搭建",children:[]},{level:3,title:"将主从数据库进行连接",slug:"将主从数据库进行连接",children:[]},{level:3,title:"主从复制测试",slug:"主从复制测试",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"database/mysql/mysql-master-slave.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2}]}}},130:(s,a,n)=>{n.r(a),n.d(a,{default:()=>p});const e=(0,n(6252).uE)('<h1 id="mysql-主从复制" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制" aria-hidden="true">#</a> MySQL - 主从复制</h1><h2 id="什么是主从复制" tabindex="-1"><a class="header-anchor" href="#什么是主从复制" aria-hidden="true">#</a> 什么是主从复制？</h2><p>主从复制是指将主数据库的 DDL 和 DML 操作通过二进制日志传到从数据库上，然后在从数据库上对这些日志进行重新执行，从而使从数据库和主数据库的数据保持一致。</p><h2 id="主从复制的原理" tabindex="-1"><a class="header-anchor" href="#主从复制的原理" aria-hidden="true">#</a> 主从复制的原理</h2><p>主要涉及三个线程: binlog 线程、I/O 线程和 SQL 线程。</p><ul><li><strong>binlog 线程</strong> : 负责将主服务器上的数据更改写入二进制日志中。</li><li><strong>I/O 线程</strong> : 负责从主服务器上读取二进制日志，并写入从服务器的中继日志中。</li><li><strong>SQL 线程</strong> : 负责读取中继日志并重放其中的 SQL 语句。</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/image-20211102202215019.png" alt="image-20211102202215019"></p><hr><p>具体步骤：</p><ul><li>MySql主库在事务提交时会把数据变更作为事件记录在二进制日志Binlog中；</li><li>主库推送二进制日志文件Binlog中的事件到从库的中继日志Relay Log中，之后从库根据中继日志重做数据变更操作，通过逻辑复制来达到主库和从库的数据一致性；</li><li>MySql通过三个线程来完成主从库间的数据复制，其中Binlog Dump线程跑在主库上，I/O线程和SQL线程跑着从库上；</li><li>当在从库上启动复制时，首先创建I/O线程连接主库，主库随后创建Binlog Dump线程读取数据库事件并发送给I/O线程，I/O线程获取到事件数据后更新到从库的中继日志Relay Log中去，之后从库上的SQL线程读取中继日志Relay Log中更新的数据库事件并应用，如下图所示。</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/mysql_master_slave_06.png" alt=""></p><h2 id="基于docker搭建" tabindex="-1"><a class="header-anchor" href="#基于docker搭建" aria-hidden="true">#</a> 基于Docker搭建</h2><p>以下内容是基于 Docker 容器搭建 MySQL 主从的案例</p><h3 id="主实例搭建" tabindex="-1"><a class="header-anchor" href="#主实例搭建" aria-hidden="true">#</a> 主实例搭建</h3><ul><li>运行mysql主实例：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -p <span class="token number">3307</span>:3306 --name mysql-master <span class="token punctuation">\\</span>\n-v /mydata/mysql-master/log:/var/log/mysql <span class="token punctuation">\\</span>\n-v /mydata/mysql-master/data:/var/lib/mysql <span class="token punctuation">\\</span>\n-v /mydata/mysql-master/conf:/etc/mysql <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\\</span>\n-d mysql:5.7\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>在mysql的配置文件夹 <code>/mydata/mysql-master/conf</code> 中创建一个配置文件<code>my.cnf</code>：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">touch</span> /mydata/mysql-master/conf/my.cnf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>修改配置文件my.cnf，配置信息如下：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>\n<span class="token comment">## 设置server_id，同一局域网中需要唯一</span>\n<span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">101</span> \n<span class="token comment">## 指定不需要同步的数据库名称</span>\nbinlog-ignore-db<span class="token operator">=</span>mysql  \n<span class="token comment">## 开启二进制日志功能</span>\nlog-bin<span class="token operator">=</span>mall-mysql-bin  \n<span class="token comment">## 设置二进制日志使用内存大小（事务）</span>\n<span class="token assign-left variable">binlog_cache_size</span><span class="token operator">=</span>1M  \n<span class="token comment">## 设置使用的二进制日志格式（mixed,statement,row）</span>\n<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed  \n<span class="token comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span>\n<span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span>  \n<span class="token comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span>\n<span class="token comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span>\n<span class="token assign-left variable">slave_skip_errors</span><span class="token operator">=</span><span class="token number">1062</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>修改完配置后重启实例：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker restart mysql-master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>进入 <code>mysql-master</code> 容器中：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token builtin class-name">exec</span> -it mysql-master /bin/bash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>在容器中使用mysql的登录命令连接到客户端：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> mysql -uroot -proot\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>创建数据同步用户：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> create user <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span> identified by <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>\nmysql<span class="token operator">&gt;</span> grant replication slave, replication client on *.* to <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="从实例搭建" tabindex="-1"><a class="header-anchor" href="#从实例搭建" aria-hidden="true">#</a> 从实例搭建</h3><ul><li>运行 mysql 从实例：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -p <span class="token number">3308</span>:3306 --name mysql-slave <span class="token punctuation">\\</span>\n-v /mydata/mysql-slave/log:/var/log/mysql <span class="token punctuation">\\</span>\n-v /mydata/mysql-slave/data:/var/lib/mysql <span class="token punctuation">\\</span>\n-v /mydata/mysql-slave/conf:/etc/mysql <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\\</span>\n-d mysql:5.7\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>在 mysql 的配置文件夹 <code>/mydata/mysql-slave/conf</code> 中创建一个配置文件 <code>my.cnf</code>：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">touch</span> /mydata/mysql-slave/conf/my.cnf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>修改配置文件my.cnf：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>\n<span class="token comment">## 设置server_id，同一局域网中需要唯一</span>\n<span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">102</span>\n<span class="token comment">## 指定不需要同步的数据库名称</span>\nbinlog-ignore-db<span class="token operator">=</span>mysql  \n<span class="token comment">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span>\nlog-bin<span class="token operator">=</span>mall-mysql-slave1-bin  \n<span class="token comment">## 设置二进制日志使用内存大小（事务）</span>\n<span class="token assign-left variable">binlog_cache_size</span><span class="token operator">=</span>1M  \n<span class="token comment">## 设置使用的二进制日志格式（mixed,statement,row）</span>\n<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed  \n<span class="token comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span>\n<span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span>  \n<span class="token comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span>\n<span class="token comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span>\n<span class="token assign-left variable">slave_skip_errors</span><span class="token operator">=</span><span class="token number">1062</span>  \n<span class="token comment">## relay_log配置中继日志</span>\n<span class="token assign-left variable">relay_log</span><span class="token operator">=</span>mall-mysql-relay-bin  \n<span class="token comment">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span>\n<span class="token assign-left variable">log_slave_updates</span><span class="token operator">=</span><span class="token number">1</span>  \n<span class="token comment">## slave设置为只读（具有super权限的用户除外）</span>\n<span class="token assign-left variable">read_only</span><span class="token operator">=</span><span class="token number">1</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>修改完配置后重启实例：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker restart mysql-slave\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="将主从数据库进行连接" tabindex="-1"><a class="header-anchor" href="#将主从数据库进行连接" aria-hidden="true">#</a> 将主从数据库进行连接</h3><ul><li>连接到主数据库的mysql客户端，查看<strong>主</strong>数据库状态：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在主节点中执行</span>\nmysql<span class="token operator">&gt;</span> show master status<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>主数据库状态显示如下：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/mysql_master_slave_01.png" alt=""></p><p>记住表中的 File 和 Position，后面配置从节点时需用到</p><ul><li>进入<code>mysql-slave</code>容器中：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token builtin class-name">exec</span> -it mysql-slave /bin/bash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>在容器中使用mysql的登录命令连接到客户端：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> mysql -uroot -proot\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>在从数据库中配置主从复制：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在从节点中执行</span>\nmysql<span class="token operator">&gt;</span> change master to <span class="token assign-left variable">master_host</span><span class="token operator">=</span><span class="token string">&#39;192.168.6.132&#39;</span>, <span class="token assign-left variable">master_user</span><span class="token operator">=</span><span class="token string">&#39;slave&#39;</span>, <span class="token assign-left variable">master_password</span><span class="token operator">=</span><span class="token string">&#39;123456&#39;</span>, <span class="token assign-left variable">master_port</span><span class="token operator">=</span><span class="token number">3307</span>, <span class="token assign-left variable">master_log_file</span><span class="token operator">=</span><span class="token string">&#39;mall-mysql-bin.000001&#39;</span>, <span class="token assign-left variable">master_log_pos</span><span class="token operator">=</span><span class="token number">617</span>, <span class="token assign-left variable">master_connect_retry</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里的 <code>master_host</code>、<code>master_log_file</code>、<code>master_log_pos</code> 分别改成 主节点的ip、主节点的File、主节点的Position</p><ul><li>主从复制命令参数说明： <ul><li>master_host：主数据库的IP地址；</li><li>master_port：主数据库的运行端口；</li><li>master_user：在主数据库创建的用于同步数据的用户账号；</li><li>master_password：在主数据库创建的用于同步数据的用户密码；</li><li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li><li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li><li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li></ul></li><li>查看从节点的主从同步状态：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在从节点中执行</span>\nmysql<span class="token operator">&gt;</span> show slave status <span class="token punctuation">\\</span>G<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>从数据库状态显示如下：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/mysql_master_slave_02.png" alt=""></p><ul><li>开启主从同步：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在从节点中执行</span>\nmysql<span class="token operator">&gt;</span> start slave<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>查看从数据库状态发现已经同步：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/mysql_master_slave_03.png" alt=""></p><h3 id="主从复制测试" tabindex="-1"><a class="header-anchor" href="#主从复制测试" aria-hidden="true">#</a> 主从复制测试</h3><blockquote><p>主从复制的测试方法有很多，可以在主实例中创建一个数据库，看看从实例中是否有该数据库，如果有，表示主从复制已经搭建成功。</p></blockquote><ul><li>在主实例中创建一个数据库<code>mall</code>；</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/mysql_master_slave_04.png" alt=""></p><ul><li>在从实例中查看数据库，发现也有一个<code>mall</code>数据库，可以判断主从复制已经搭建成功。</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/mysql_master_slave_05.png" alt=""></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>http://www.macrozheng.com/#/reference/mysql_master_slave</li></ul>',66),l={},p=(0,n(3744).Z)(l,[["render",function(s,a){return e}]])},3744:(s,a)=>{a.Z=(s,a)=>{for(const[n,e]of a)s[n]=e;return s}}}]);