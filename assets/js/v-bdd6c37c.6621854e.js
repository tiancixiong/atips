"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[1902],{5033:(e,a,s)=>{s.r(a),s.d(a,{data:()=>n});const n={key:"v-bdd6c37c",path:"/devops/docker/docker-basic.html",title:"Docker 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Docker 简介",slug:"docker-简介",children:[]},{level:2,title:"Docker 环境安装",slug:"docker-环境安装",children:[]},{level:2,title:"Docker 镜像常用命令",slug:"docker-镜像常用命令",children:[{level:3,title:"搜索镜像",slug:"搜索镜像",children:[]},{level:3,title:"下载镜像",slug:"下载镜像",children:[]},{level:3,title:"如何查找镜像支持的版本",slug:"如何查找镜像支持的版本",children:[]},{level:3,title:"列出镜像",slug:"列出镜像",children:[]},{level:3,title:"删除镜像",slug:"删除镜像",children:[]}]},{level:2,title:"Docker 容器常用命令",slug:"docker-容器常用命令",children:[{level:3,title:"新建并启动容器",slug:"新建并启动容器",children:[]},{level:3,title:"列出容器",slug:"列出容器",children:[]},{level:3,title:"停止容器",slug:"停止容器",children:[]},{level:3,title:"强制停止容器",slug:"强制停止容器",children:[]},{level:3,title:"启动已停止的容器",slug:"启动已停止的容器",children:[]},{level:3,title:"进入容器",slug:"进入容器",children:[]},{level:3,title:"删除容器",slug:"删除容器",children:[]},{level:3,title:"查看容器的日志",slug:"查看容器的日志",children:[]},{level:3,title:"查看容器的IP地址",slug:"查看容器的ip地址",children:[]},{level:3,title:"修改容器的启动方式",slug:"修改容器的启动方式",children:[]},{level:3,title:"同步宿主机时间到容器",slug:"同步宿主机时间到容器",children:[]},{level:3,title:"指定容器时区",slug:"指定容器时区",children:[]},{level:3,title:"在宿主机查看docker使用cpu、内存、网络、io情况",slug:"在宿主机查看docker使用cpu、内存、网络、io情况",children:[]},{level:3,title:"查看Docker磁盘使用情况",slug:"查看docker磁盘使用情况",children:[]},{level:3,title:"进入Docker容器内部的bash",slug:"进入docker容器内部的bash",children:[]},{level:3,title:"使用root帐号进入Docker容器内部",slug:"使用root帐号进入docker容器内部",children:[]},{level:3,title:"Docker创建外部网络",slug:"docker创建外部网络",children:[]}]},{level:2,title:"修改Docker镜像的存放位置",slug:"修改docker镜像的存放位置",children:[]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"devops/docker/docker-basic.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:1}]}}},3627:(e,a,s)=>{s.r(a),s.d(a,{default:()=>p});var n=s(6252);const l=(0,n.uE)('<h1 id="docker-基础" tabindex="-1"><a class="header-anchor" href="#docker-基础" aria-hidden="true">#</a> Docker 基础</h1><h2 id="docker-简介" tabindex="-1"><a class="header-anchor" href="#docker-简介" aria-hidden="true">#</a> Docker 简介</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上。使用 Docker 可以更方便的打包、测试以及部署应用程序。</p><h2 id="docker-环境安装" tabindex="-1"><a class="header-anchor" href="#docker-环境安装" aria-hidden="true">#</a> Docker 环境安装</h2><ul><li>安装yum-utils：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>为yum源添加docker仓库位置：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>安装docker:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> docker-ce\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>启动docker:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl start docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="docker-镜像常用命令" tabindex="-1"><a class="header-anchor" href="#docker-镜像常用命令" aria-hidden="true">#</a> Docker 镜像常用命令</h2><h3 id="搜索镜像" tabindex="-1"><a class="header-anchor" href="#搜索镜像" aria-hidden="true">#</a> 搜索镜像</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker search java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="下载镜像" tabindex="-1"><a class="header-anchor" href="#下载镜像" aria-hidden="true">#</a> 下载镜像</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker pull java:8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="如何查找镜像支持的版本" tabindex="-1"><a class="header-anchor" href="#如何查找镜像支持的版本" aria-hidden="true">#</a> 如何查找镜像支持的版本</h3><blockquote><p>由于 <code>docker search</code> 命令只能查找出是否有该镜像，不能找到该镜像支持的版本，所以我们需要通过docker hub 来搜索支持的版本。</p></blockquote>',19),i=(0,n.Uk)("进入docker hub的官网，地址："),r={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},c=(0,n.Uk)("https://hub.docker.com"),d=(0,n.uE)('<li><p>然后搜索需要的镜像：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/devops/docker/image-20211102142132446.png" alt="image-20211102142132446"></p></li><li><p>查看镜像支持的版本：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/devops/docker/image-20211102142147289.png" alt="image-20211102142147289"></p></li><li><p>进行镜像的下载操作：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker pull nginx:1.17.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li>',3),o=(0,n.uE)('<h3 id="列出镜像" tabindex="-1"><a class="header-anchor" href="#列出镜像" aria-hidden="true">#</a> 列出镜像</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker images\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像" aria-hidden="true">#</a> 删除镜像</h3><ul><li>指定名称删除镜像</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker rmi java:8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>指定名称删除镜像（强制）</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker rmi -f java:8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>删除所有没有引用的镜像</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker rmi <span class="token variable"><span class="token variable">`</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span><span class="token variable">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>强制删除所有镜像</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker rmi -f <span class="token variable"><span class="token variable">$(</span>docker images<span class="token variable">)</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="docker-容器常用命令" tabindex="-1"><a class="header-anchor" href="#docker-容器常用命令" aria-hidden="true">#</a> Docker 容器常用命令</h2><h3 id="新建并启动容器" tabindex="-1"><a class="header-anchor" href="#新建并启动容器" aria-hidden="true">#</a> 新建并启动容器</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -p <span class="token number">80</span>:80 --name nginx -d nginx:1.17.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>-d选项：表示后台运行</li><li>--name选项：指定运行后容器的名字为nginx,之后可以通过名字来操作容器</li><li>-p选项：指定端口映射，格式为：hostPort:containerPort</li></ul><h3 id="列出容器" tabindex="-1"><a class="header-anchor" href="#列出容器" aria-hidden="true">#</a> 列出容器</h3><ul><li>列出运行中的容器：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">ps</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>列出所有容器</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">ps</span> -a\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="停止容器" tabindex="-1"><a class="header-anchor" href="#停止容器" aria-hidden="true">#</a> 停止容器</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># $ContainerName及$ContainerId可以用docker ps命令查询出来</span>\ndocker stop <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>比如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker stop nginx\n<span class="token comment">#或者</span>\ndocker stop c5f5d5125587\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="强制停止容器" tabindex="-1"><a class="header-anchor" href="#强制停止容器" aria-hidden="true">#</a> 强制停止容器</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">kill</span> <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="启动已停止的容器" tabindex="-1"><a class="header-anchor" href="#启动已停止的容器" aria-hidden="true">#</a> 启动已停止的容器</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker start <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="进入容器" tabindex="-1"><a class="header-anchor" href="#进入容器" aria-hidden="true">#</a> 进入容器</h3><ul><li>先查询出容器的pid：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker inspect --format <span class="token string">&quot;{{.State.Pid}}&quot;</span> <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>根据容器的pid进入容器：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nsenter --target <span class="token string">&quot;<span class="token variable">$pid</span>&quot;</span> --mount --uts --ipc --net --pid\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h3><ul><li>删除指定容器：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">rm</span> <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>按名称删除容器</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">`</span>docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> mall-* <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>强制删除所有容器；</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="查看容器的日志" tabindex="-1"><a class="header-anchor" href="#查看容器的日志" aria-hidden="true">#</a> 查看容器的日志</h3><ul><li>查看当前全部日志</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker logs <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>动态查看日志</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker logs <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span> -f\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="查看容器的ip地址" tabindex="-1"><a class="header-anchor" href="#查看容器的ip地址" aria-hidden="true">#</a> 查看容器的IP地址</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker inspect --format <span class="token string">&#39;{{ .NetworkSettings.IPAddress }}&#39;</span> <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="修改容器的启动方式" tabindex="-1"><a class="header-anchor" href="#修改容器的启动方式" aria-hidden="true">#</a> 修改容器的启动方式</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker container update --restart<span class="token operator">=</span>always <span class="token variable">$ContainerName</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="同步宿主机时间到容器" tabindex="-1"><a class="header-anchor" href="#同步宿主机时间到容器" aria-hidden="true">#</a> 同步宿主机时间到容器</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">cp</span> /etc/localtime <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>:/etc/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="指定容器时区" tabindex="-1"><a class="header-anchor" href="#指定容器时区" aria-hidden="true">#</a> 指定容器时区</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -p <span class="token number">80</span>:80 --name nginx <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">TZ</span><span class="token operator">=</span><span class="token string">&quot;Asia/Shanghai&quot;</span> <span class="token punctuation">\\</span>\n-d nginx:1.17.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="在宿主机查看docker使用cpu、内存、网络、io情况" tabindex="-1"><a class="header-anchor" href="#在宿主机查看docker使用cpu、内存、网络、io情况" aria-hidden="true">#</a> 在宿主机查看docker使用cpu、内存、网络、io情况</h3><ul><li>查看指定容器情况：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker stats <span class="token variable">$ContainerName</span><span class="token punctuation">(</span>或者<span class="token variable">$ContainerId</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>查看所有容器情况：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker stats -a\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="查看docker磁盘使用情况" tabindex="-1"><a class="header-anchor" href="#查看docker磁盘使用情况" aria-hidden="true">#</a> 查看Docker磁盘使用情况</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker system <span class="token function">df</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="进入docker容器内部的bash" tabindex="-1"><a class="header-anchor" href="#进入docker容器内部的bash" aria-hidden="true">#</a> 进入Docker容器内部的bash</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token builtin class-name">exec</span> -it <span class="token variable">$ContainerName</span> /bin/bash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="使用root帐号进入docker容器内部" tabindex="-1"><a class="header-anchor" href="#使用root帐号进入docker容器内部" aria-hidden="true">#</a> 使用root帐号进入Docker容器内部</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token builtin class-name">exec</span> -it --user root <span class="token variable">$ContainerName</span> /bin/bash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="docker创建外部网络" tabindex="-1"><a class="header-anchor" href="#docker创建外部网络" aria-hidden="true">#</a> Docker创建外部网络</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker network create -d bridge my-bridge-network\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="修改docker镜像的存放位置" tabindex="-1"><a class="header-anchor" href="#修改docker镜像的存放位置" aria-hidden="true">#</a> 修改Docker镜像的存放位置</h2><ul><li>查看Docker镜像的存放位置：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker info <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;Docker Root Dir&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>关闭Docker服务：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl stop docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>移动目录到目标路径：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mv</span> /var/lib/docker /mydata/docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>建立软连接：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ln</span> -s /mydata/docker /var/lib/docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>http://www.macrozheng.com/#/../reference/docker</li></ul>',77),t={},p=(0,s(3744).Z)(t,[["render",function(e,a){const s=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[l,(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("p",null,[i,(0,n._)("a",r,[c,(0,n.Wm)(s)])])]),d]),o],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[s,n]of a)e[s]=n;return e}}}]);