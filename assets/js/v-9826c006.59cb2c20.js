"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[8290],{5863:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-9826c006",path:"/software/maven.html",title:"Maven",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基础概念",slug:"基础概念",children:[{level:3,title:"坐标",slug:"坐标",children:[]},{level:3,title:"生命周期",slug:"生命周期",children:[]},{level:3,title:"约定目录结构",slug:"约定目录结构",children:[]}]},{level:2,title:"配置文件",slug:"配置文件",children:[{level:3,title:"本地仓库",slug:"本地仓库",children:[]},{level:3,title:"设置镜像仓库",slug:"设置镜像仓库",children:[]},{level:3,title:"参考文献",slug:"参考文献",children:[]}]},{level:2,title:"Jar 包冲突",slug:"jar-包冲突",children:[{level:3,title:"Maven Jar包管理机制",slug:"maven-jar包管理机制",children:[]},{level:3,title:"Jar包冲突产生的原因",slug:"jar包冲突产生的原因",children:[]},{level:3,title:"排查定位Jar包冲突",slug:"排查定位jar包冲突",children:[]},{level:3,title:"解决Jar包冲突的方法",slug:"解决jar包冲突的方法",children:[]},{level:3,title:"参考资料",slug:"参考资料",children:[]}]}],filePathRelative:"software/maven.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2}]}}},7169:(a,n,s)=>{s.r(n),s.d(n,{default:()=>D});var t=s(6252);const e=(0,t.uE)('<h1 id="maven" tabindex="-1"><a class="header-anchor" href="#maven" aria-hidden="true">#</a> Maven</h1><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h2><p><strong>本地仓库、远程仓库关系</strong>：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211028143854066.png" alt="image-20211028143854066"></p>',4),p=(0,t._)("li",null,[(0,t._)("strong",null,"本地仓库"),(0,t.Uk)("：")],-1),l=(0,t._)("li",null,[(0,t._)("strong",null,"私服"),(0,t.Uk)("：私服中存储了公司的内部专用的jar！不仅如此，私服还充当了中央仓库的镜像，说白了就是一个代理")],-1),o={href:"https://repo1.maven.org/maven2/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("中央仓库"),r=(0,t.Uk)("：该仓库存储了互联网上的 jar，由 Maven 团队来维护"),i=(0,t._)("h3",{id:"坐标",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#坐标","aria-hidden":"true"},"#"),(0,t.Uk)(" 坐标")],-1),u=(0,t._)("p",null,[(0,t._)("code",null,"groupId"),(0,t.Uk)("，"),(0,t._)("code",null,"artifactId"),(0,t.Uk)("和"),(0,t._)("code",null,"version"),(0,t.Uk)("一起形成坐标的概念。坐标能够唯一确定 jar 或者 pom。")],-1),d=(0,t.Uk)("查找坐标网址："),g={href:"https://search.maven.org/",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Uk)("、"),m={href:"https://mvnrepository.com/",target:"_blank",rel:"noopener noreferrer"},b=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li><code>&lt;groupId&gt;</code>：组织名，一般是域名反写+实际项目名，如：org.springframework.boot</li><li><code>&lt;artifactId&gt;</code>：项目名，如：spring-boot-starter</li><li><code>&lt;version&gt;</code>：版本号</li><li><code>&lt;packaging&gt;</code>：打包方式</li></ul><p>其他属性：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>&lt;scope&gt;</code>：依赖的范围。可以控制哪些依赖在哪些 <code>classpath</code> 中可用，哪些依赖包含在一个应用中 <ul><li>compile(默认)：运行期有效，依赖在所有的 <code>classpath</code> 中可用，会被打入包中</li><li>provided：编译期有效，运行期不需要提供，不会打入包中</li><li>runtime：编译不需要，在运行期有效，需要导入包中（接口与实现分离）</li><li>test：测试需要，不会打入包中。</li><li>system：非本地仓库引入、存在系统的某个路径下的jar（一般不使用）</li></ul></li></ul><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><table><thead><tr><th>生命周期阶段</th><th>描述</th></tr></thead><tbody><tr><td><strong>validate</strong></td><td>验证项目是否正确，以及所有为了完整构建必要的信息是否可用</td></tr><tr><td>generate-sources</td><td>生成所有需要包含在编译过程中的源代码</td></tr><tr><td>process-sources</td><td>处理源代码，比如过滤一些值</td></tr><tr><td>generate-resources</td><td>生成所有需要包含在打包中的资源文件</td></tr><tr><td>process-resources</td><td>复制并处理资源文件至目标(target)目录，准备打包</td></tr><tr><td><strong>compile</strong></td><td>编译项目的源代码</td></tr><tr><td>process-classes</td><td>后处理编译生成的 class 文件，例如对Java类进行字节码增强</td></tr><tr><td>generate-test-sources</td><td>生成所有包含在测试编译过程中的测试源码</td></tr><tr><td>process-test-sources</td><td>处理测试源码，比如过滤一些值</td></tr><tr><td>generate-test-resources</td><td>生成测试需要的资源文件</td></tr><tr><td>process-test-resources</td><td>复制并处理测试资源文件至测试目标目录</td></tr><tr><td>test-compile</td><td>编译测试源码至测试目标目录</td></tr><tr><td><strong>test</strong></td><td>使用合适的单元测试框架运行测试，这些测试不需要被打包或发布</td></tr><tr><td>prepare-package</td><td>在真正的打包之前，执行一些准备打包必要的操作</td></tr><tr><td><strong>package</strong></td><td>将编译好的代码打包成可分发的格式，如 JAR，WAR</td></tr><tr><td>pre-integration-test</td><td>执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境</td></tr><tr><td>integration-test</td><td>如果有必要的话，处理包并发布至集成测试可以运行的环境</td></tr><tr><td>post-integration-test</td><td>执行一些在集成测试运行之后需要的动作。如清理集成测试环境。</td></tr><tr><td><strong>verify</strong></td><td>执行所有检查，验证包是有效的，符合质量规范</td></tr><tr><td><strong>install</strong></td><td>安装包至本地仓库，以备本地的其它项目作为依赖使用</td></tr><tr><td><strong>deploy</strong></td><td>安装包至远程仓库(私服)，共享给其他开发人员和项目</td></tr></tbody></table><p>IDEA 中 Lifecycle ：</p><ul><li><strong>clean</strong>：有问题，多清理！</li><li><strong>package</strong>：打成 Jar/War 包，会自动进行 clean+compile</li></ul><p>maven 常用构建命令：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211028153649935.png" alt="image-20211028153649935"></p><h3 id="约定目录结构" tabindex="-1"><a class="header-anchor" href="#约定目录结构" aria-hidden="true">#</a> 约定目录结构</h3><p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：</p><ul><li><code>${basedir}</code>：存放pom.xml和所有的子目录</li><li><code>${basedir}/src/main/java</code>：项目的源代码</li><li><code>${basedir}/src/main/resources</code>：项目的资源，比如说 property、yml 文件</li><li><code>${basedir}/src/main/webapp/WEB-INF</code>：web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</li><li><code>${basedir}/src/test/java</code>：项目的测试类，比如说 Junit 代码</li><li><code>${basedir}/src/test/resources</code>：测试用的资源</li><li><code>${basedir}/target</code>：打包输出目录</li><li><code>${basedir}/target/classes</code>：编译输出目录</li><li><code>${basedir}/target/test-classes</code>：测试编译输出目录</li><li><code>~/.m2/repository</code>、<code>C:\\Users\\Administrator\\.m2</code>：maven 默认的本地仓库目录位置</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211028150357970.png" alt="image-20211028150357970"></p><ul><li><code>src/main</code>：这个目录中的内容最终会打包到 Jar/War 包中 <ul><li><code>src/main/resources</code></li></ul></li><li><code>src/test</code>：测试内容，并不会打包进去</li></ul><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>在安装目录中找到配置文件：<code>conf/settings.xml</code></p><h3 id="本地仓库" tabindex="-1"><a class="header-anchor" href="#本地仓库" aria-hidden="true">#</a> 本地仓库</h3><p>配置<strong>本地仓库</strong>地址：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="设置镜像仓库" tabindex="-1"><a class="header-anchor" href="#设置镜像仓库" aria-hidden="true">#</a> 设置镜像仓库</h3><p>设置镜像仓库，可以提高下载速度。在配置文件的 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签中添加 <code>&lt;mirror/&gt;</code> 子节点:</p>',23),h={href:"https://developer.aliyun.com/mvn/guide",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("阿里云公共仓库"),x=(0,t.Uk)("："),f=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',1),j=(0,t._)("h3",{id:"参考文献",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#参考文献","aria-hidden":"true"},"#"),(0,t.Uk)(" 参考文献")],-1),I={href:"http://www.kailing.pub/PdfReader/web/viewer.html?file=mavenGuide",target:"_blank",rel:"noopener noreferrer"},_=(0,t.Uk)("mavenGuide"),J=(0,t.uE)('<h2 id="jar-包冲突" tabindex="-1"><a class="header-anchor" href="#jar-包冲突" aria-hidden="true">#</a> Jar 包冲突</h2><p>Jar 包冲突表现往往有这几种：</p><ul><li>程序抛出 <code>java.lang.ClassNotFoundException</code> 异常；</li><li>程序抛出 <code>java.lang.NoSuchMethodError</code> 异常；</li><li>程序抛出 <code>java.lang.NoClassDefFoundError</code> 异常；</li><li>程序抛出 <code>java.lang.LinkageError</code> 异常等；</li></ul><h3 id="maven-jar包管理机制" tabindex="-1"><a class="header-anchor" href="#maven-jar包管理机制" aria-hidden="true">#</a> Maven Jar包管理机制</h3><h4 id="依赖传递原则" tabindex="-1"><a class="header-anchor" href="#依赖传递原则" aria-hidden="true">#</a> 依赖传递原则</h4><p>当在 Maven 项目中引入 A 的依赖，A 的依赖通常又会引入 B 的 jar 包，B 可能还会引入 C 的 jar 包。这样，当你在 pom.xml 文件中添加了 A 的依赖，Maven 会自动的帮你把所有相关的依赖都添加进来。</p><p>这样的好处是，使用起来就非常方便，不用自己挨个去找依赖 Jar 包了。坏处是会引起 Jar 包冲突。</p><h4 id="最短路径优先原则" tabindex="-1"><a class="header-anchor" href="#最短路径优先原则" aria-hidden="true">#</a> 最短路径优先原则</h4><p>规则内容：（有多个依赖时）主要根据依赖的<strong>路径长短</strong>来决定引入哪个依赖。</p><p>举例说明：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>依赖链路一：A -&gt; X -&gt; Y -&gt; Z(v1.1)\n依赖链路二：B -&gt; Q -&gt; Z(v1.2)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>项目中同时引入了 A 和 B 两个依赖，它们间接都引入了 Z 依赖，但由于 B 的依赖链路比较短，因此最终生效的是Z(v1.2) 版本。这就是最短路径优先原则。</p><p>此时如果 Z 的 v1.2 版本和 v1.2 版本区别较大，那么就会发生 Jar 包冲突的表现。</p><h4 id="最先声明优先原则" tabindex="-1"><a class="header-anchor" href="#最先声明优先原则" aria-hidden="true">#</a> 最先声明优先原则</h4><p>规则内容：如果两个依赖的路径一样，最短路径优先原则是无法进行判断的。此时需要使用<strong>最先声明优先原则</strong>，也就是说，谁的声明在前则优先选择。</p><p>举例说明：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>依赖链路一：A -&gt; X -&gt; Z(v1.2)\n依赖链路二：B -&gt; Q -&gt; Z(v1.1)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>A 和 B 最终都依赖 Z，此时 A 的声明（pom.xml 中引入的顺序）优先于 B，则针对冲突的 Z 会优先引入 Z(v1.2)。</p><p>如果 Z(v1.2) 向下兼容 Z(v1.1)，则不会出现 Jar 包冲突问题。但如果将 B 声明放前面，则有可能会发生 Jar 包冲突。</p><h3 id="jar包冲突产生的原因" tabindex="-1"><a class="header-anchor" href="#jar包冲突产生的原因" aria-hidden="true">#</a> Jar包冲突产生的原因</h3><p>上面讲了 Maven 维护 Jar 包的三个原则，其实每个原则会发生什么样的 Jar 包冲突。</p><p>举例说明：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>依赖链路一：A -&gt; B -&gt; C -&gt; G21(v21.0)\n依赖链路二：D -&gt; F -&gt; G20(v20.0)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>假设项目中同时引入了 A 和 D 的依赖，按照依赖传递机制和默认依赖调节机制（第一：路径最近者优先；第二：第一声明优先），默认会引入 G20 版本的 Jar 包，而 G21 的 Jar 包不会被引用。</p><p>如果 C 中的方法使用了 G21 版本中的某个新方法（或类），由于 Maven 的处理，导致 G21 并未被引入。此时，程序在调用对应类时便会抛出 <code>ClassNotFoundException</code> 异常；调用对应方法时便会抛出 <code>NoSuchMethodError</code> 异常。</p><h3 id="排查定位jar包冲突" tabindex="-1"><a class="header-anchor" href="#排查定位jar包冲突" aria-hidden="true">#</a> 排查定位Jar包冲突</h3><p>在高版本的 IDEA 中已经自带了 Maven 依赖管理插件，依次执行：打开 pom.xml 文件，在文件内右击，选择Maven，选择 Show Dependencies 即可查看 Maven 的依赖层级结构：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211026151051714.png" alt="image-20211026151051714"></p><p>在图中可以清楚的看到都使用了哪些依赖，它们的层级，是否有冲突的 jar 包等。冲突部分会用红色标出，同时标出 Maven 默认选择了哪个版本。</p>',29),y=(0,t.Uk)("如果你的IDEA版本中默认没有Maven管理插件，也可安装 "),N={href:"https://plugins.jetbrains.com/plugin/7179-maven-helper/",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("Maven Helper"),M=(0,t.Uk)("，通过这块插件来帮你分析Jar包冲突。"),F=(0,t.uE)('<p>安装完插件，重启之后，打开 pom.xml 文件，在文件下面的 <em>Dependency Analyzer</em> 视图中便可以看到 Jar 包冲突的结果分析：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211026162032598.png" alt="image-20211026162032598"></p><p>此时，关于哪些 Jar 包冲突了，便一目了然。同时，可以右击冲突的 Jar 包，执行 <strong>Exclude</strong> 进行排除，在pom.xml中便会自动添加排除jar包的 <code>&lt;exclusion&gt;</code> 标签：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211026170132602.png" alt="image-20211026170132602"></p><h3 id="解决jar包冲突的方法" tabindex="-1"><a class="header-anchor" href="#解决jar包冲突的方法" aria-hidden="true">#</a> 解决Jar包冲突的方法</h3><p>这里基于 Maven 项目介绍几种场景下解决Jar冲突的方法：</p><ul><li>Maven 默认处理：采用此种方法，要牢记 Maven 依赖调节机制的基本原则，路径最近者优先和第一声明优先；</li><li>排除法：上面 Maven Helper 的实例中已经讲到，可以将冲突的 Jar 包在 pom.xml 中通过 <code>&lt;exclusion&gt;</code> 标签来进行排除；</li><li>版本锁定法：如果项目中依赖同一 Jar 包的很多版本，一个个排除非常麻烦，此时可用<strong>版本锁定法</strong>，即直接明确引入指定版本的依赖。根据前面介绍 Maven 处理 Jar 包基本原则，此种方式的优先级最高。这种方法一般采用上面我们讲到的<strong>如何统一 Jar 包依赖</strong>的方式。</li></ul><h4 id="依赖排除" tabindex="-1"><a class="header-anchor" href="#依赖排除" aria-hidden="true">#</a> 依赖排除</h4><p>去掉间接引入的jar包，在 pom.xml 中使用 <code>&lt;exclusion&gt;</code> 标签去排除冲突的 jar 包（上面利用插件 Maven Helper 中的 execlude 方法其实等同于该方法）</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><hr><p>对于本地环境可以利用 Maven Helper 等插件来解决，但在预生产或生成环境中就没那么方便了。此时可以通过<code>mvn</code> 命令来定位突出的细节。</p><p>执行如下 <code>mvn</code> 命令，注意不要省略 <code>-Dverbose</code>，要不然不会显示被忽略的包：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mvn dependency:tree -Dverbose\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>输出内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-dependency-plugin:2.1:tree <span class="token punctuation">(</span>default-cli<span class="token punctuation">)</span> @ euler-foundation ---\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> com.hsit:euler-foundation:jar:0.9.0.1-SNAPSHOT\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> +- com.rop:rop:jar:1.0.1:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.slf4j:slf4j-api:jar:1.7.5:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.slf4j:slf4j-log4j12:jar:1.7.5:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- log4j:log4j:jar:1.2.16:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- commons-lang:commons-lang:jar:2.6:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- commons-codec:commons-codec:jar:1.6:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- javax.validation:validation-api:jar:1.0.0.GA:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.hibernate:hibernate-validator:jar:4.2.0.Final:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.codehaus.jackson:jackson-core-asl:jar:1.9.5:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.5:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.codehaus.jackson:jackson-jaxrs:jar:1.9.5:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.codehaus.jackson:jackson-xc:jar:1.9.5:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token punctuation">\\</span>- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.2.3:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>     +- com.fasterxml.jackson.core:jackson-core:jar:2.2.3:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>     +- com.fasterxml.jackson.core:jackson-annotations:jar:2.2.3:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>     +- com.fasterxml.jackson.core:jackson-databind:jar:2.2.3:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>     +- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.2.3:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>     <span class="token punctuation">\\</span>- org.codehaus.woodstox:stax2-api:jar:3.1.1:compile\n<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>        <span class="token punctuation">\\</span>- javax.xml.stream:stax-api:jar:1.0-2:compile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>加上参数 <code>Dincludes</code> 或者 <code>Dexcludes</code> 制定小包含或者排除的包，参数后使用 <code>groupId:artifactId:version</code> 格式传值，dependency:tree 就会帮你过滤出来：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mvn dependency:tree -Dverbose -Dincludes=org.springframework:spring-tx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3>',19),O={href:"https://mp.weixin.qq.com/s/Eu2SmJKC7LLkk9DnGzyM6w",target:"_blank",rel:"noopener noreferrer"},A=(0,t.Uk)("解决 Maven Jar 包冲突"),U=(0,t.Uk)(" - 公众号@日拱一兵"),E={},D=(0,s(3744).Z)(E,[["render",function(a,n){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("ul",null,[p,l,(0,t._)("li",null,[(0,t._)("strong",null,[(0,t._)("a",o,[c,(0,t.Wm)(s)])]),r])]),i,u,(0,t._)("p",null,[d,(0,t._)("a",g,[(0,t.Wm)(s)]),k,(0,t._)("a",m,[(0,t.Wm)(s)])]),b,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",h,[v,(0,t.Wm)(s)]),x]),f])]),j,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",I,[_,(0,t.Wm)(s)])])]),J,(0,t._)("p",null,[y,(0,t._)("a",N,[w,(0,t.Wm)(s)]),M]),F,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",O,[A,(0,t.Wm)(s)]),U])])],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,t]of n)a[s]=t;return a}}}]);