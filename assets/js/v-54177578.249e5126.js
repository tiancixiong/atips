"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[3526],{4513:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-54177578",path:"/mq/mq-RabbitMQ.html",title:"MQ - RabbitMQ",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"简介",slug:"简介",children:[]},{level:2,title:"安装",slug:"安装",children:[{level:3,title:"Windows",slug:"windows",children:[]},{level:3,title:"Linux",slug:"linux",children:[]}]},{level:2,title:"核心概念",slug:"核心概念",children:[]},{level:2,title:"工作模式",slug:"工作模式",children:[{level:3,title:"简单队列",slug:"简单队列",children:[]},{level:3,title:"Work工作队列",slug:"work工作队列",children:[]},{level:3,title:"发布订阅模式",slug:"发布订阅模式",children:[]}]},{level:2,title:"持久化",slug:"持久化",children:[{level:3,title:"交换机持久化",slug:"交换机持久化",children:[]},{level:3,title:"队列持久化",slug:"队列持久化",children:[]},{level:3,title:"消息持久化",slug:"消息持久化",children:[]}]},{level:2,title:"Spring AMQP",slug:"spring-amqp",children:[{level:3,title:"依赖和配置",slug:"依赖和配置",children:[]},{level:3,title:"监听者",slug:"监听者",children:[]},{level:3,title:"AmqpTemplate",slug:"amqptemplate",children:[]},{level:3,title:"测试代码",slug:"测试代码",children:[]}]},{level:2,title:"参考文献",slug:"参考文献",children:[]}],filePathRelative:"mq/mq-RabbitMQ.md",git:{updatedTime:1719836412e3,contributors:[{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:2}]}}},3986:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var p=a(6252);const t=(0,p.uE)('<h1 id="mq-rabbitmq" tabindex="-1"><a class="header-anchor" href="#mq-rabbitmq" aria-hidden="true">#</a> MQ - RabbitMQ</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>RabbitMQ 是基于AMQP的一款消息管理系统，采用 Erlang 语言实现。</p><p>官网： http://www.rabbitmq.com/</p><p>官方教程：http://www.rabbitmq.com/getstarted.html</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> Windows</h3><p>分为两步</p>',8),e=(0,p.Uk)("安装Erlang，下载地址："),c={href:"http://erlang.org/download/otp_win64_21.3.exe",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("otp_win64_21.3.exe"),l=(0,p._)("p",null,[(0,p._)("img",{src:"//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/arch_screen_53.png",alt:"img"})],-1),i=(0,p.Uk)("安装RabbitMQ，下载地址："),u={href:"https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("rabbitmq-server-3.7.14.exe"),k=(0,p._)("p",null,[(0,p._)("img",{src:"//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/arch_screen_54.png",alt:"img"})],-1),m=(0,p.uE)('<li><p>安装完成后，进入 RabbitMQ 安装目录下的 <code>sbin</code> 目录</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/arch_screen_55.png" alt="img"></p></li><li><p>在地址栏输入 cmd 并回车启动命令行，然后输入以下命令启动管理功能：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/arch_screen_56.png" alt="img"></p></li>',2),b=(0,p.Uk)("访问地址查看是否安装成功："),d={href:"http://localhost:15672/",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("http://localhost:15672/"),h=(0,p._)("p",null,[(0,p._)("img",{src:"//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/arch_screen_57.png",alt:"img"})],-1),y=(0,p._)("li",null,[(0,p._)("p",null,"输入账号密码并登录：guest guest")],-1),v=(0,p.uE)('<h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><p><strong>RabbitMQ 整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息</strong>。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，RabbitMQ 就好比由邮局、邮箱和邮递员组成的一个系统。从计算机术语层面来说，RabbitMQ 模型更像是一种交换机模型。</p><p>RabbitMQ 的整体模型架构如下：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/20201124213040.png" alt="img"></p><p>RabbitMQ 的消息模型：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/arch_screen_52.png" alt="img"></p><table><thead><tr><th>标志</th><th>中文名</th><th>英文名</th><th>描述</th></tr></thead><tbody><tr><td>P</td><td>生产者</td><td>Producer</td><td>消息的发送者，可以将消息发送到交换机</td></tr><tr><td>C</td><td>消费者</td><td>Consumer</td><td>消息的接收者，从队列中获取消息进行消费</td></tr><tr><td>X</td><td>交换机</td><td>Exchange</td><td>接收生产者发送的消息，并根据路由键发送给指定队列</td></tr><tr><td>Q</td><td>队列</td><td>Queue</td><td>存储从交换机发来的消息</td></tr><tr><td>type</td><td>交换机类型</td><td>type</td><td>direct表示直接根据路由键（orange/black）发送消息</td></tr></tbody></table><ul><li><p>Broker</p><ul><li>RabbitMQ 的服务端程序，可以认为一个 mq 节点就是一个 broker；</li></ul></li><li><p>Producer 生产者</p><ul><li>创建消息 Message，然后发布到 RabbitMQ 中；</li></ul></li><li><p>Consumer 消费者</p><ul><li>消费队列里面的消息；</li></ul></li><li><p>Message 消息</p><ul><li>生产消费的内容，有消息头和消息体，也包括多个属性配置，比如 RoutingKey 路由键；</li></ul></li><li><p>Queue 队列</p><ul><li>Queue 是RabbitMQ 的内部对象，用于存储消息，消息都只能存储在队列中；</li></ul></li><li><p>Channel 信道</p><ul><li>一条支持多路复用的通道，独立的双向数据流通道，可以发布、订阅、接收消息；</li><li>信道是建立在真实的 TCP 连接内的虚拟连接，复用 TCP 连接的通道；</li></ul></li><li><p>Connection 连接</p><ul><li>Connection 是 RabbitMQ 的 socket 连接，它封装了 socket 协议相关部分逻辑，一个连接上可以有多个channel 进行通信；</li></ul></li><li><p>Exchange 交换机</p><ul><li>生产者将消息发送到 Exchange，交换机将消息路由到一个或者多个队列中，里面有多个类型，队列和交换机是多对多的关系；</li></ul></li><li><p>RoutingKey 路由键</p><ul><li>生产者将消息发给交换器的时候，一般会指定一个 RoutingKey，用来指定这个消息的路由规则；</li><li>最大长度255 字节；</li></ul></li><li><p>Binding 绑定</p><ul><li>通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键 ( BindingKey )，这样RabbitMQ 就可以将消息路由到对应的队列；（生产者将消息发送给交换器时，需要一个 RoutingKey，当 BindingKey 和 RoutingKey相匹配时，消息会被路由到对应的队列中）</li></ul></li><li><p>Virtual host 虚拟主机</p><ul><li><p>用于不同业务模块的逻辑隔离，一个 Virtual Host 里面可以有若干个 Exchange 和 Queue，同一个VirtualHost 里面不能有相同名称的 Exchange 或 Queue；默认是 <code>/</code>；</p></li><li><p>添加虚拟主机</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1334716-20210613171451601-611682538.png" alt="img"></p></li></ul></li><li><p>关系图</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1334716-20210614001238268-1217658587.png" alt="img"></p></li><li><p>主要端口</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>4369 \t#erlang 发现口\n5672 \t#client 端通信口\n15672 \t#管理界面 ui 端口\n25672 \t#server 间内部通信口\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="工作模式" tabindex="-1"><a class="header-anchor" href="#工作模式" aria-hidden="true">#</a> 工作模式</h2><p>RabbitMQ提供了6种消息模型，第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1527068544487.png" alt="1527068544487"></p><p>我们通过一个 demo 案例来了解下 RabbitMQ 的工作方式。</p><ul><li><p>依赖：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>抽取一个建立RabbitMQ连接的工具类，方便其他程序获取连接：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionUtil</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 建立与RabbitMQ的连接\n     * <span class="token keyword">@return</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 定义连接工厂</span>\n        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 设置服务地址【需改成你本地的mq地址】</span>\n        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 端口</span>\n        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 设置账号信息，用户名、密码、vhost(虚拟机)</span>\n        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/yolo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;yolo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 通过工程获取连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li></ul><h3 id="简单队列" tabindex="-1"><a class="header-anchor" href="#简单队列" aria-hidden="true">#</a> 简单队列</h3><blockquote><p>参考：https://www.rabbitmq.com/tutorials/tutorial-one-java.html</p></blockquote><p>一个消息生成者对应一个消息消费者，点对点。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1334716-20210614113240047-2128567438.png" alt="img"></p><ul><li>P（producer/ publisher）：生产者</li><li>C（consumer）：消费者</li><li>队列（红色区域）</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><p>我们将用 Java 编写两个程序；发送单个消息的生产者，以及接收消息并将其打印出来的消费者。我们将详细介绍Java API 中的一些细节，这是一个消息传递的“Hello World”。</p><p>我们将调用我们的消息发布者（发送者）Send 和我们的消息消费者（接收者）Recv。发布者将连接到RabbitMQ，发送一条消息，然后退出。</p><h5 id="生产者发送消息" tabindex="-1"><a class="header-anchor" href="#生产者发送消息" aria-hidden="true">#</a> 生产者发送消息</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//import com.example.util.ConnectionUtil; //上文准备的mq连接工具类</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;simple_queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接以及mq通道</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从连接中创建通道，这是完成大部分API的地方。</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 声明（创建）队列，必须声明队列才能够发送消息，我们可以把消息发送到队列中。</span>\n        <span class="token comment">// 声明一个队列是幂等的 - 只有当它不存在时才会被创建</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 消息内容</span>\n        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [x] Sent &#39;&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//关闭通道和连接</span>\n        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>控制台：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> [x] Sent &#39;Hello World!&#39;\n\nProcess finished with exit code 0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="管理工具中查看消息" tabindex="-1"><a class="header-anchor" href="#管理工具中查看消息" aria-hidden="true">#</a> 管理工具中查看消息</h5><p>进入队列页面，可以看到新建了一个队列：<code>simple_queue</code></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112232231938.png" alt="image-20211112232231938"></p><p>点击队列名称，进入详情页，可以查看消息：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112232329323.png" alt="image-20211112232329323"></p><p>在控制台查看消息并不会将消息消费，所以消息还在。</p><h5 id="消费者获取消息" tabindex="-1"><a class="header-anchor" href="#消费者获取消息" aria-hidden="true">#</a> 消费者获取消息</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;simple_queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [x] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，第二个参数：是否自动进行消息确认。</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>控制台：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> [x] received : Hello World!!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这个时候，队列中的消息就没了：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112232622801.png" alt="image-20211112232622801"></p><p>我们发现，消费者已经获取了消息，但是程序没有停止，一直在监听队列中是否有新的消息。一旦有新的消息进入队列，就会立即打印。</p><h4 id="消息确认机制-ack" tabindex="-1"><a class="header-anchor" href="#消息确认机制-ack" aria-hidden="true">#</a> 消息确认机制（ACK）</h4><p>通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。</p><p>那么问题来了：RabbitMQ 怎么知道消息被接收了呢？如果消费者领取消息后，还没执行操作就挂掉了呢？或者抛出了异常？消息消费失败，但是RabbitMQ无从得知，这样消息就丢失了！</p><p>因此，RabbitMQ 有一个 <em><strong>ACK</strong></em> 机制。当消费者获取消息后，会向 RabbitMQ 发送回执 ACK，告知消息已经被接收。不过这种回执 ACK 分两种情况：</p><ul><li><strong>自动 ACK</strong>：消息一旦被接收，消费者自动发送ACK</li><li><strong>手动 ACK</strong>：消息接收后，不会发送ACK，需要手动调用</li></ul><p>哪种更好呢？这需要看消息的重要性：</p><ul><li>如果消息不太重要，丢失也没有影响，那么自动 ACK 会比较方便；</li><li>如果消息非常重要，不容丢失。那么最好在消费完成后手动 ACK，否则接收消息后就自动 ACK，RabbitMQ 就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li></ul><p>我们之前的测试都是自动ACK的，如果要手动ACK，需要改动消费者中的代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;simple_queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建通道</span>\n        <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [x] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 手动进行ACK</span>\n                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，第二个参数false，手动进行ACK</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>注意到最后一行代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果第二个参数为 <code>true</code>，则会自动进行 ACK；如果为 <code>false</code>，则需要手动 ACK。方法的声明：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// com.rabbitmq.client.Channel</span>\n<span class="token class-name">String</span> <span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoAck<span class="token punctuation">,</span> <span class="token class-name">Consumer</span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="自动ack存在的问题" tabindex="-1"><a class="header-anchor" href="#自动ack存在的问题" aria-hidden="true">#</a> 自动ACK存在的问题</h5><p>修改消费者，添加异常，如下：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532764600849.png" alt="1532764600849"></p><p>生产者不做任何修改，直接运行，消息发送成功：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112233414795.png" alt="image-20211112233414795"></p><p>运行消费者，程序抛出异常。但是消息依然被消费：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">23</span>:35:08.909 <span class="token punctuation">[</span>pool-1-thread-4<span class="token punctuation">]</span> ERROR com.rabbitmq.client.impl.ForgivingExceptionHandler - Consumer com.example.simple.Recv<span class="token variable">$1</span>@38af4f93 <span class="token punctuation">(</span>amq.ctag-Bhinh4S45urhVQ_fUlW3ww<span class="token punctuation">)</span> method handleDelivery <span class="token keyword">for</span> channel AMQChannel<span class="token punctuation">(</span>amqp://yolo@127.0.0.1:5672//yolo,1<span class="token punctuation">)</span> threw an exception <span class="token keyword">for</span> channel AMQChannel<span class="token punctuation">(</span>amqp://yolo@127.0.0.1:5672//yolo,1<span class="token punctuation">)</span>\njava.lang.ArithmeticException: / by zero\n\tat com.example.simple.Recv<span class="token variable">$1</span>.handleDelivery<span class="token punctuation">(</span>Recv.java:25<span class="token punctuation">)</span>\n\tat com.rabbitmq.client.impl.ConsumerDispatcher<span class="token variable">$5</span>.run<span class="token punctuation">(</span>ConsumerDispatcher.java:149<span class="token punctuation">)</span>\n\tat com.rabbitmq.client.impl.ConsumerWorkService<span class="token variable">$WorkPoolRunnable</span>.run<span class="token punctuation">(</span>ConsumerWorkService.java:100<span class="token punctuation">)</span>\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker<span class="token punctuation">(</span>ThreadPoolExecutor.java:1149<span class="token punctuation">)</span>\n\tat java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span>ThreadPoolExecutor.java:624<span class="token punctuation">)</span>\n\tat java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112233535862.png" alt="image-20211112233535862"></p><h5 id="演示手动ack" tabindex="-1"><a class="header-anchor" href="#演示手动ack" aria-hidden="true">#</a> 演示手动ACK</h5><p>修改消费者，把自动改成手动（去掉之前制造的异常）：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532764831241.png" alt="1532764831241"></p><p>生产者不变，再次运行：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112233414795.png" alt="image-20211112233414795"></p><p>运行消费者：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112233852905.png" alt="image-20211112233852905"></p><p>但是，查看管理界面，发现：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112234014591.png" alt="image-20211112234014591"></p><p>停掉消费者的程序，发现：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112234111722.png" alt="image-20211112234111722"></p><p>这是因为虽然我们设置了手动 ACK，但是代码中并没有进行消息确认！所以消息并未被真正消费掉，当我们关掉这个消费者，消息的状态再次变回 Ready。</p><hr><p>下面进行手动发送ACK确认。修改消费者代码：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532765123282.png" alt="1532765123282"></p><p>执行消费者：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211112233535862.png" alt="image-20211112233535862"></p><p>消息消费成功！</p><h3 id="work工作队列" tabindex="-1"><a class="header-anchor" href="#work工作队列" aria-hidden="true">#</a> Work工作队列</h3><blockquote><p>参考：https://www.rabbitmq.com/tutorials/tutorial-two-java.html</p></blockquote><p>工作队列或者竞争消费者模式.</p><p>工作队列，又称任务队列。主要思想就是避免执行资源密集型任务时，必须等待它执行完成。相反我们稍后完成任务，我们将任务封装为消息并将其发送到队列。 在后台运行的工作进程将获取任务并最终执行作业。当你运行许多消费者时，任务将在他们之间共享，但是<strong>一个消息只能被一个消费者获取</strong>。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1334716-20210614160200510-1459212516.png" alt="img"></p><ul><li>消息生产能力大于消费能力，增加多几个消费节点；</li><li>和简单队列类似，增加多个几个消费节点，处于竞争关系；</li><li>策略有轮询和非公平，默认为轮询；</li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例</h4><p>接下来我们来模拟这个流程：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>P：生产者：任务的发布者\n\nC1：消费者，领取任务并且完成任务，假设完成速度较快\n\nC2：消费者2：领取任务并完成任务，假设完成速度慢\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="生产者" tabindex="-1"><a class="header-anchor" href="#生产者" aria-hidden="true">#</a> 生产者</h5><p>生产者与案例1中的几乎一样，不过这里是循环发送 50 条消息：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;test_work_queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 循环发布任务</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 消息内容</span>\n            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;task .. &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>\n            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [x] Sent &#39;&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 关闭通道和连接</span>\n        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h5 id="消费者1" tabindex="-1"><a class="header-anchor" href="#消费者1" aria-hidden="true">#</a> 消费者1</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;test_work_queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者1] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 模拟完成任务的耗时：1000ms</span>\n                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">// 手动进行 ACK</span>\n                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，第二个参数：是否自动进行消息确认。</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h5 id="消费者2" tabindex="-1"><a class="header-anchor" href="#消费者2" aria-hidden="true">#</a> 消费者2</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;test_work_queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者2] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 手动进行 ACK</span>\n                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，第二个参数：是否自动进行消息确认。</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>与消费者1基本类似，就是没有设置消费耗时时间。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，先启动两个消费者，然后再启动生产者发送50条消息：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1527085826462.png" alt="1527085826462"></p><p>可以发现，两个消费者各自消费了 25 条消息，而且各不相同，这就实现了任务的分发。</p><h4 id="能者多劳" tabindex="-1"><a class="header-anchor" href="#能者多劳" aria-hidden="true">#</a> 能者多劳</h4><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长；</li><li>然而两人最终消费的消息数量是一样的；</li><li>消费者2大量时间处于空闲状态，消费者1一直忙碌。</li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。</p><p>怎么实现呢？</p><p>我们可以使用 <code>basicQos</code> 方法和 <code>prefetchCount = 1</code> 设置。 这告诉 RabbitMQ 一次不要向工作人员发送多于一条消息。 或者换句话说，不要向工作人员发送新消息，直到它处理并确认了前一个消息。 相反，它会将其分派给不是仍然忙碌的下一个工作人员。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532765689904.png" alt="1532765689904"></p><blockquote><p>需在执行比较慢的消费者1中进行设置，在生产者中设置无效。</p></blockquote><p>再次测试：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113082109524.png" alt="image-20211113082109524"></p><h3 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h3><blockquote><p>参考：https://www.rabbitmq.com/tutorials/tutorial-three-java.html</p></blockquote><p>在之前的模式中，我们创建了一个工作队列。 工作队列背后的假设是：每个任务只被传递给一个工作人员。 在这一部分，我们将做一些完全不同的事情——我们将会传递一个信息给多个消费者。 这种模式被称为“<strong>发布/订阅</strong>”。</p><p>订阅模型示意图：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1527086284940.png" alt="1527086284940"></p><ol><li><p>1个生产者，多个消费者；</p></li><li><p>每一个消费者都有自己的一个队列；</p></li><li><p>生产者没有将消息直接发送到队列，而是发送到了交换机；</p></li><li><p>每个队列都要绑定到交换机；</p></li><li><p>生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者获取的目的。</p></li></ol><p>X（Exchanges）：RabbitMQ 的 Exchange 交换机。一方面：接收生产者发送的消息。另一方面：知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p><ul><li>生产者将消息发送到 Exchange，交换器将消息路由到一个或者多个队列中，交换机有多个类型，队列和交换机是多对多的关系；</li><li><strong>交换机只负责转发消息，不具备存储消息的能力</strong>，如果没有队列和 Exchange 绑定，或者没有符合的路由规则，则消息会被丢失！</li></ul><hr><p>Exchange 类型有以下几种：</p><ul><li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列 <ul><li>只需要简单的将队列绑定到交换机上，一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上；很像子网广播，每台子网内的主机都获得了一份复制的消息；</li><li>Fanout交换机转发消息是最快的，用于发布订阅，广播形式；</li></ul></li><li><strong>Direct</strong>：定向，把消息交给符合指定routing key 的队列 <ul><li>将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配；eg：如果一个队列绑定到该交换机上要求路由键 “aabb”，则只有被标记为“aabb”的消息才被转发，不会转发aabb.cc，也不会转发gg.aabb，只会转发aabb；</li></ul></li><li><strong>Topic</strong>：通配符，把消息交给符合routing pattern（路由模式） 的队列 <ul><li>topic交换机是一种发布/订阅的模式，结合了直连交换机与扇形交换机的特点；通过过交换机和队列绑定到指定的【通配符路由键】，生产者发送消息到交换机，交换机根据消息的路由key进行转发到对应的队列，消息要指定routingkey路由键；</li><li>符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词；eg：因此“abc.#”能够匹配到“abc.def.ghi”，但是“abc.</em>” 只会匹配到“abc.def”；</li></ul></li><li><strong>Headers</strong>（少用） <ul><li>根据发送的消息内容中的headers属性进行匹配, 在绑定Queue与Exchange时指定一组键值对；</li><li>当消息发送到RabbitMQ时会取到该消息的headers与Exchange绑定时指定的键值对进行匹配；</li><li>如果完全匹配则消息会路由到该队列，否则不会路由到该队列；</li></ul></li></ul><h4 id="广播模式-fanout" tabindex="-1"><a class="header-anchor" href="#广播模式-fanout" aria-hidden="true">#</a> 广播模式-Fanout</h4><p>流程图：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1527086564505.png" alt="1527086564505"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1） 可以有多个消费者</li><li>2） 每个<strong>消费者有自己的queue</strong>（队列）</li><li>3） 每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4） <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5） 交换机把消息发送给绑定过的所有队列</li><li>6） 队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h5 id="创建交换机" tabindex="-1"><a class="header-anchor" href="#创建交换机" aria-hidden="true">#</a> 创建交换机</h5><p>在 <code>/yolo</code> 虚拟机下创建一个叫 <code>fanout_exchange_test</code>，类型是 <strong>fanout</strong> 的交换机</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113084303117.png" alt="image-20211113084303117"></p><ul><li><p>Virtual host：虚拟机</p></li><li><p>Name：交换机名</p><ul><li>同一个 Virtual host 里面的 Name 不能重复；不同的 Virtual host 是可以重复的。</li></ul></li><li><p>Durability：是否持久化，有2个选项：</p><ul><li>Durable：是</li><li>Transient：否</li></ul></li><li><p>Auto delete</p><ul><li>当最后一个绑定被删除后，该exchange自动被删除。 即，在exchange创建之后，并且已经设置好binding，如果该exchange的所有binding都被删除，则该exchange被删除。当然如果当前的exchange还没有开始binding，是不会被删除的。</li></ul></li><li><p>Internal</p><ul><li>是否是内部专用exchange，是的话，就意味着我们不能往该exchange里面发送消息</li></ul></li><li><p>Arguments</p><ul><li>参数，是AMQP协议留给AMQP实现做扩展用的。其中rabbit提供了一个属性 <code>alternate-exchange</code>，当发送的消息，当前的exchange，根据路由信息没有找到对应的Queue的时候，就会将消息转发到alternate-exchange属性指定的exchange中。如果最总都没有路由到队列中，就会将该条消息丢弃。</li></ul></li></ul><h5 id="生产者-1" tabindex="-1"><a class="header-anchor" href="#生产者-1" aria-hidden="true">#</a> 生产者</h5><p>两个变化：</p><ol><li><p>声明Exchange，不再声明Queue</p></li><li><p>发送消息到Exchange，不再发送到Queue</p></li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 交换机名称</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;fanout_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 声明exchange，指定类型为fanout</span>\n        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 消息内容</span>\n        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello everyone&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// 发布消息到Exchange</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [生产者] Sent &#39;&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h5 id="消费者1-1" tabindex="-1"><a class="header-anchor" href="#消费者1-1" aria-hidden="true">#</a> 消费者1</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv1</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 交换机名</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;fanout_exchange_test&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// 队列名</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;fanout_exchange_queue_1&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 绑定队列到交换机</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者1] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，自动返回完成</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>要注意代码中：<strong>队列需要和交换机绑定</strong></p><h5 id="消费者2-1" tabindex="-1"><a class="header-anchor" href="#消费者2-1" aria-hidden="true">#</a> 消费者2</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv2</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 交换机名</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;fanout_exchange_test&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// 队列名</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;fanout_exchange_queue_2&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 绑定队列到交换机</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者2] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，手动返回完成</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h5 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h5><p>先运行两个消费者，然后再允许生产者发送1条消息：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113102833929.png" alt="image-20211113102833929"></p><h4 id="路由模式-direct" tabindex="-1"><a class="header-anchor" href="#路由模式-direct" aria-hidden="true">#</a> 路由模式-Direct</h4><blockquote><p>参考：https://www.rabbitmq.com/tutorials/tutorial-four-java.html</p></blockquote><p><strong>Direct</strong>：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532766437787.png" alt="1532766437787"></p><ul><li><p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key；</p></li><li><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列；</p></li><li><p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息；</p></li><li><p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息。</p></li></ul><p>在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p>在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个Routing Key（路由key）；消息生产者在向 Exchange 发送消息时，也必须指定消息的 Routing key。交换机根据消息的路由key，转发给对应的队列。</p><h5 id="创建交换机-1" tabindex="-1"><a class="header-anchor" href="#创建交换机-1" aria-hidden="true">#</a> 创建交换机</h5><p>name：<code>direct_exchange_test</code>，type：<code>direct</code></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113171906922.png" alt="image-20211113171906922"></p><h5 id="生产者-2" tabindex="-1"><a class="header-anchor" href="#生产者-2" aria-hidden="true">#</a> 生产者</h5><p>此处我们模拟商品的增删改，发送消息的 RoutingKey 分别是：insert、update、delete</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;direct_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明exchange，指定类型为direct</span>\n        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 消息内容</span>\n        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;商品新增了， id = 1001&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// String message = &quot;商品更新了， id = 1001&quot;;</span>\n        <span class="token comment">// String message = &quot;商品删除了， id = 1001&quot;;</span>\n\n        <span class="token comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;insert&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// routing key = update,代表更新商品</span>\n        <span class="token comment">// channel.basicPublish(EXCHANGE_NAME, &quot;update&quot;, null, message.getBytes());</span>\n        <span class="token comment">// routing key = delete,代表删除商品</span>\n        <span class="token comment">// channel.basicPublish(EXCHANGE_NAME, &quot;delete&quot;, null, message.getBytes());</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [商品服务：] Sent &#39;&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h5 id="消费者1-2" tabindex="-1"><a class="header-anchor" href="#消费者1-2" aria-hidden="true">#</a> 消费者1</h5><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;direct_exchange_queue_1&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;direct_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 绑定队列到交换机，同时指定需要订阅的routing key。假设此处需要update和delete消息</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者1] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，自动ACK</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h5 id="消费者2-2" tabindex="-1"><a class="header-anchor" href="#消费者2-2" aria-hidden="true">#</a> 消费者2</h5><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;direct_exchange_queue_2&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;direct_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;insert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者2] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，自动ACK</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h5 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h5><p>先启动消费者1、消费者2；然后多次启动生产者，分别发送insert、update、delete消息。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113173921074.png" alt="image-20211113173921074"></p><ul><li>消费者1，只消费了update和delete消息</li><li>消费者2，三种消息都消费了</li></ul><h4 id="主题通配符模式-topic" tabindex="-1"><a class="header-anchor" href="#主题通配符模式-topic" aria-hidden="true">#</a> 主题通配符模式-Topic</h4><blockquote><p>参考：https://www.rabbitmq.com/tutorials/tutorial-five-java.html</p></blockquote><p><em><strong>Topic</strong></em> 类型的 Exchange 与 <strong>Direct</strong> 相比，都是可以根据 RoutingKey 把消息路由到不同的队列。只不过 <em><strong>Topic</strong></em> 类型 Exchange 可以让队列在绑定 Routing key 的时候使用<strong>通配符</strong>！</p><ul><li><p>Routingkey 一般都是有一个或多个单词组成，多个单词之间以 <code>.</code> (英文点)分割，例如： <code>user.insert</code></p></li><li><p><strong>通配符规则</strong>：</p><ul><li><code>#</code>：匹配一个或多个词 <ul><li>例如：<code>audit.#</code>，能够匹配 <code>audit.irs.corporate</code> 或者 <code>audit.irs</code></li></ul></li><li><code>*</code>：匹配不多不少恰好1个词 <ul><li>例如：<code>audit.*</code>，只能匹配 <code>audit.irs</code></li></ul></li></ul></li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532766712166.png" alt="1532766712166"></p><p>上图这个例子中，我们将发送所有描述动物的消息。消息将使用由三个字（三个单词，两个点）组成的 routing key 发送。路由关键字中的第一个单词将描述速度，第二个颜色和第三个种类：<code>&lt;speed&gt;.&lt;color&gt;.&lt;species&gt;</code>。</p><p>我们创建了三个绑定：Q1绑定了绑定键 <code>* .orange.*</code>，Q2绑定了 <code>*.*.rabbit</code> 和 <code>lazy.＃</code>：</p><ul><li><p>Q1匹配所有的橙色动物。</p></li><li><p>Q2匹配关于兔子以及懒惰动物的消息。</p></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 练习，生产者发送如下消息，会进入哪个队列：\nquick.orange.rabbit \t匹配 *.orange.* 和 *.*.rabbit，进到Q1和Q2\nlazy.orange.elephant \t匹配 *.orange.* 和 lazy.#，进到Q1和Q2\nquick.orange.fox \t\t匹配 *.orange.*，进入Q1\nlazy.brown.fox \t\t\t匹配 lazy.#，进入Q2\nlazy.pink.rabbit \t\t匹配 lazy.# 和 *.*.rabbit，进入同一个队列Q2(消息只会发一次)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="创建交换机-2" tabindex="-1"><a class="header-anchor" href="#创建交换机-2" aria-hidden="true">#</a> 创建交换机</h5><p>name：<code>topic_exchange_test</code>；type：<code>topic</code></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113185032178.png" alt="image-20211113185032178"></p><h5 id="生产者-3" tabindex="-1"><a class="header-anchor" href="#生产者-3" aria-hidden="true">#</a> 生产者</h5><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.isnert</code>、<code>item.update</code>、<code>item.delete</code>：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;topic_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明exchange，指定类型为topic</span>\n        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 消息内容</span>\n        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;新增商品 : id = 1001&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// String message = &quot;更新商品 : id = 1001&quot;;</span>\n        <span class="token comment">// String message = &quot;删除商品 : id = 1001&quot;;</span>\n        <span class="token comment">// String message = &quot;商品status : id = 1001&quot;;</span>\n\n        <span class="token comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span>\n        <span class="token class-name">String</span> routingKey <span class="token operator">=</span> <span class="token string">&quot;item.insert&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// String routingKey = &quot;item.update&quot;;</span>\n        <span class="token comment">// String routingKey = &quot;item.delete&quot;;</span>\n        <span class="token comment">// String routingKey = &quot;item.status&quot;;</span>\n\n        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [商品服务：] Sent &#39;&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h5 id="消费者1-3" tabindex="-1"><a class="header-anchor" href="#消费者1-3" aria-hidden="true">#</a> 消费者1</h5><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resv1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;topic_exchange_queue_1&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;topic_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、delete</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;item.update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;item.delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者1] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，自动ACK</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h5 id="消费者2-3" tabindex="-1"><a class="header-anchor" href="#消费者2-3" aria-hidden="true">#</a> 消费者2</h5><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品等。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resv2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">&quot;topic_exchange_queue_2&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">&quot;topic_exchange_test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取到连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">ConnectionUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取通道</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 声明队列</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">&quot;item.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义队列的消费者</span>\n        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>\n                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token comment">// body 即消息体</span>\n                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; [消费者2] received : &quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 监听队列，自动ACK</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h5 id="测试-2" tabindex="-1"><a class="header-anchor" href="#测试-2" aria-hidden="true">#</a> 测试</h5><p>先启动消费者1、消费者2；然后多次启动生产者分别发送各种 routingKey 不同的消息：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113185421314.png" alt="image-20211113185421314"></p><h2 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化" aria-hidden="true">#</a> 持久化</h2><ul><li><p>如何避免消息丢失？</p><p>消费者的ACK机制。可以防止消费者丢失消息。但是，如果在消费者消费之前，MQ就宕机了，消息就没了。</p></li><li><p>是可以将消息进行持久化呢？</p><p>要将消息持久化，前提是：队列、Exchange 都持久化。</p></li></ul><p>RabbitMQ 不允许你绑定一个非持久化（non-durable）的交换机和一个 durable 的队列；反之亦然。要想成功实现持久化必须队列和交换机都是 durable 的。</p><p>一旦创建了队列和交换机，就不能修改其标志了。例如，如果创建了一个 non-durable 的队列，然后想把它改变成 durable 的，唯一的办法就是删除这个队列然后重现创建。</p><hr><p>参考：https://www.cnblogs.com/wu-song/p/9923220.html</p><h3 id="交换机持久化" tabindex="-1"><a class="header-anchor" href="#交换机持久化" aria-hidden="true">#</a> 交换机持久化</h3><p>下面通过修改上文 topic 中的案例，来了解配置持久化。</p><p>由于之前案例中交换机 <code>topic_exchange_test</code> 是非持久化的，这里需要先将其删除，然后再新建一个同名的但是是持久化的交换机：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113214713785.png" alt="image-20211113214713785"></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113214844869.png" alt="image-20211113214844869"></p><p>通过点击交换机名称进入详情页，找到 <code>Delete</code> 选项将其删除。</p><p>然后再新建一个同名为的、持久化的交换机：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113215046636.png" alt="image-20211113215046636"></p><hr><p>然后，修改 <em><strong>生产者</strong></em>：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532766951432.png" alt="1532766951432"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>DeclareOk</span> <span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> durable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>durable</code>：true-持久化；false-非持久化</li></ul><h3 id="队列持久化" tabindex="-1"><a class="header-anchor" href="#队列持久化" aria-hidden="true">#</a> 队列持久化</h3><p>同样的，需要将原来非持久化的队列 <code>topic_exchange_queue_1</code>和<code>topic_exchange_queue_2</code> 删除，然后新建持久化的队列：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113215433835.png" alt="image-20211113215433835"></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113215625732.png" alt="image-20211113215625732"></p><p>新建持久化的队列：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211113215756090.png" alt="image-20211113215756090"></p><hr><p>修改 <em><strong>消费者</strong></em>：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532766981230.png" alt="1532766981230"></p><h3 id="消息持久化" tabindex="-1"><a class="header-anchor" href="#消息持久化" aria-hidden="true">#</a> 消息持久化</h3><p>生产者：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1532767057491.png" alt="1532767057491"></p><h2 id="spring-amqp" tabindex="-1"><a class="header-anchor" href="#spring-amqp" aria-hidden="true">#</a> Spring AMQP</h2><p>Spring AMQP的页面：https://spring.io/projects/spring-amqp</p><p>spring-amqp 是对 AMQP 协议的抽象实现，而 spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是 RabbitMQ。</p><h3 id="依赖和配置" tabindex="-1"><a class="header-anchor" href="#依赖和配置" aria-hidden="true">#</a> 依赖和配置</h3><p>添加 AMQP 的启动器：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>application.yml</code> 中添加 RabbitMQ 地址：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>\n    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment">#rabbitmq主机地址</span>\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> yolo <span class="token comment">#用户名</span>\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span> <span class="token comment">#密码</span>\n    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /yolo <span class="token comment">#虚拟机名</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="监听者" tabindex="-1"><a class="header-anchor" href="#监听者" aria-hidden="true">#</a> 监听者</h3><p>在 SpringAMQP 中，对消息的消费者进行了封装和抽象，一个普通的 JavaBean 中的普通方法，只要通过简单的注解，就可以成为一个消费者。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ExchangeTypes</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Exchange</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Queue</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">QueueBinding</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitListener</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Listener</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>\n            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;spring.test.queue&quot;</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>\n                    value <span class="token operator">=</span> <span class="token string">&quot;spring.test.exchange&quot;</span><span class="token punctuation">,</span>\n                    ignoreDeclarationExceptions <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>\n                    type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;#.#&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收到消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><p><code>@Componet</code>：类上的注解，注册到Spring容器；</p></li><li><p><code>@RabbitListener</code>：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性：</p><ul><li><p><code>bindings</code>：指定绑定关系，可以有多个。值是 <code>@QueueBinding</code> 的数组。</p><p><code>@QueueBinding</code> 包含下面属性：</p><ul><li><code>value</code>：这个消费者关联的队列。值是 <code>@Queue</code>，代表一个队列；</li><li><code>exchange</code>：队列所绑定的交换机，值是 <code>@Exchange</code> 类型；</li><li><code>key</code>：队列和交换机绑定的 <code>RoutingKey；</code></li></ul></li></ul></li></ul><p>类似 listen 这样的方法在一个类中可以写多个，就代表多个消费者。</p><h3 id="amqptemplate" tabindex="-1"><a class="header-anchor" href="#amqptemplate" aria-hidden="true">#</a> AmqpTemplate</h3><p>Spring 为 AMQP 提供了统一的消息处理模板：<em><strong>AmqpTemplate</strong></em>，非常方便的发送消息，其发送方法：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/1527090258083.png" alt="1527090258083"></p><p>红框圈起来的是比较常用的3个方法，分别是：</p><ul><li>指定交换机、RoutingKey和消息体</li><li>指定消息</li><li>指定RoutingKey和消息，会向默认的交换机发送消息</li></ul><h3 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqDemo</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">AmqpTemplate</span> amqpTemplate<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;hello, Spring boot amqp&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;spring.test.exchange&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a.b&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 等待10秒后再结束</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><p>创建交换机和队列，：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211114135903787.png" alt="image-20211114135903787"></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211114135920910.png" alt="image-20211114135920910"></p><p>运行代码，查看日志：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/mq/image-20211114140005780.png" alt="image-20211114140005780"></p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ul><li>https://www.rabbitmq.com/getstarted.html</li><li>http://www.macrozheng.com/#/architect/mall_arch_09</li><li>https://www.cnblogs.com/coder-zyc/p/14880725.html</li></ul>',248),w={},q=(0,a(3744).Z)(w,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("ol",null,[(0,p._)("li",null,[(0,p._)("p",null,[e,(0,p._)("a",c,[o,(0,p.Wm)(a)])]),l]),(0,p._)("li",null,[(0,p._)("p",null,[i,(0,p._)("a",u,[r,(0,p.Wm)(a)])]),k]),m,(0,p._)("li",null,[(0,p._)("p",null,[b,(0,p._)("a",d,[g,(0,p.Wm)(a)])]),h]),y]),v],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);