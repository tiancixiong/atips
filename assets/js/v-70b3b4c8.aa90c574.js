"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[9821],{9707:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-70b3b4c8",path:"/java/container/java-hash-hashcode.html",title:"HashCode",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"HashCode 为什么使用 31 作为乘数？",slug:"hashcode-为什么使用-31-作为乘数",children:[{level:3,title:"案例",slug:"案例",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"java/container/java-hash-hashcode.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:1}]}}},6595:(n,a,s)=>{s.r(a),s.d(a,{default:()=>j});var e=s(6252);const t=(0,e._)("h1",{id:"hashcode",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#hashcode","aria-hidden":"true"},"#"),(0,e.Uk)(" HashCode")],-1),p=(0,e._)("h2",{id:"hashcode-为什么使用-31-作为乘数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#hashcode-为什么使用-31-作为乘数","aria-hidden":"true"},"#"),(0,e.Uk)(" HashCode 为什么使用 31 作为乘数？")],-1),o=(0,e.Uk)("看一个问题："),l={href:"https://stackoverflow.com/questions/299304/",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Why does Java's hashCode() in String use 31 as a multiplier?"),c=(0,e.uE)('<p>这个问题就是说为什么在 Java 中计算哈希码的逻辑中，是选择 31 作为乘数。</p><p>先看下 <em>String</em> 类中源码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.lang.String</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> h<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',3),i=(0,e.Uk)("上面第 8 行代码中写死了是固定值 31；我们再看下"),u={href:"https://docs.oracle.com/javase/8/docs/api/index.html",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("官方文档"),k=(0,e.Uk)("中的解释："),d=(0,e._)("p",null,[(0,e._)("img",{src:"//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/image-20211023200104454.png",alt:"image-20211023200104454"})],-1),b=(0,e._)("p",null,[(0,e.Uk)("官方给出的计算哈希值公司是："),(0,e._)("code",null,"s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]"),(0,e.Uk)("；"),(0,e._)("code",null,"s[i]"),(0,e.Uk)(" 是字符串第 "),(0,e._)("code",null,"i"),(0,e.Uk)(" 字符；"),(0,e._)("code",null,"n"),(0,e.Uk)(" 是字符串长度。")],-1),m=(0,e._)("hr",null,null,-1),g=(0,e.Uk)("在上面的 "),v={href:"https://stackoverflow.com/questions/299304/",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("stackoverflow问题"),_=(0,e.Uk)(" 下方的回答："),U=(0,e.uE)('<ol><li>31 是一个奇质数，如果选择偶数会导致乘积运算时数据溢出。</li><li>另外在二进制中，2 个 5 次方是 32，那么也就是 <code>31 * i == (i &lt;&lt; 5) - i</code>。这主要是说乘积运算可以使用位移提升性能，同时目前的 JVM 虚拟机也会自动支持此类的优化。</li></ol><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><p>TODO</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>《Java 面经手册》- 小傅哥</li></ul>',5),w={},j=(0,s(3744).Z)(w,[["render",function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,(0,e._)("p",null,[o,(0,e._)("a",l,[r,(0,e.Wm)(s)])]),c,(0,e._)("p",null,[i,(0,e._)("a",u,[h,(0,e.Wm)(s)]),k]),d,b,m,(0,e._)("p",null,[g,(0,e._)("a",v,[f,(0,e.Wm)(s)]),_]),U],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);