"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[5141],{9956:(e,a,o)=>{o.r(a),o.d(a,{data:()=>c});const c={key:"v-2c8cef51",path:"/java/concurrent/java-concurrent-overview.html",title:"Java 并发体系",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"📖 内容",slug:"📖-内容",children:[{level:3,title:"Java 并发 - 并发简介",slug:"java-并发-并发简介",children:[]},{level:3,title:"Java 并发 - 线程基础",slug:"java-并发-线程基础",children:[]},{level:3,title:"Java 并发 - 核心机制",slug:"java-并发-核心机制",children:[]},{level:3,title:"Java 并发锁",slug:"java-并发锁",children:[]},{level:3,title:"Java 原子类",slug:"java-原子类",children:[]},{level:3,title:"Java 并发容器",slug:"java-并发容器",children:[]},{level:3,title:"Java 线程池",slug:"java-线程池",children:[]},{level:3,title:"Java 并发工具类",slug:"java-并发工具类",children:[]},{level:3,title:"Java 内存模型",slug:"java-内存模型",children:[]}]},{level:2,title:"📚 资料",slug:"📚-资料",children:[]}],filePathRelative:"java/concurrent/java-concurrent-overview.md",git:{updatedTime:1719836412e3,contributors:[{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:2}]}}},3478:(e,a,o)=>{o.r(a),o.d(a,{default:()=>l});var c=o(6252);const d=(0,c.uE)('<h1 id="java-并发体系" tabindex="-1"><a class="header-anchor" href="#java-并发体系" aria-hidden="true">#</a> Java 并发体系</h1><h2 id="📖-内容" tabindex="-1"><a class="header-anchor" href="#📖-内容" aria-hidden="true">#</a> 📖 内容</h2><p><strong>Java JUC</strong> 简介：在 Java 5.0 提供了 <code>java.util.concurrent</code>（简称JUC ）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。</p><p>Java 对于并发的支持主要汇聚在 J.U.C。而 J.U.C 的核心是 AQS。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/concurrent/java-juc-overview.png" alt="image-20211027190935750"></p><h3 id="java-并发-并发简介" tabindex="-1"><a class="header-anchor" href="#java-并发-并发简介" aria-hidden="true">#</a> Java 并发 - 并发简介</h3><blockquote><p><strong>关键词：<code>进程</code>、<code>线程</code>、<code>安全性</code>、<code>活跃性</code>、<code>性能</code>、<code>死锁</code>、<code>饥饿</code>、<code>上下文切换</code></strong></p></blockquote><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/concurrent/20200701113445.png" alt="img"></p><h3 id="java-并发-线程基础" tabindex="-1"><a class="header-anchor" href="#java-并发-线程基础" aria-hidden="true">#</a> Java 并发 - 线程基础</h3><blockquote><p><strong>关键词：<code>Thread</code>、<code>Runnable</code>、<code>Callable</code>、<code>Future</code>、<code>wait</code>、<code>notify</code>、<code>notifyAll</code>、<code>join</code>、<code>sleep</code>、<code>yeild</code>、<code>线程状态</code>、<code>线程通信</code></strong></p></blockquote><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/concurrent/20200630221707.png" alt="img"></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/concurrent/java-thread_1.png" alt="img"></p><h3 id="java-并发-核心机制" tabindex="-1"><a class="header-anchor" href="#java-并发-核心机制" aria-hidden="true">#</a> Java 并发 - 核心机制</h3><blockquote><p><strong>关键词：<code>synchronized</code>、<code>volatile</code>、<code>CAS</code>、<code>ThreadLocal</code></strong></p></blockquote><h3 id="java-并发锁" tabindex="-1"><a class="header-anchor" href="#java-并发锁" aria-hidden="true">#</a> Java 并发锁</h3><blockquote><p><strong>关键词：<code>AQS</code>、<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>、<code>Condition</code></strong></p></blockquote><h3 id="java-原子类" tabindex="-1"><a class="header-anchor" href="#java-原子类" aria-hidden="true">#</a> Java 原子类</h3><blockquote><p><strong>关键词：<code>CAS</code>、<code>Atomic</code></strong></p></blockquote><h3 id="java-并发容器" tabindex="-1"><a class="header-anchor" href="#java-并发容器" aria-hidden="true">#</a> Java 并发容器</h3><blockquote><p><strong>关键词：<code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code></strong></p></blockquote><h3 id="java-线程池" tabindex="-1"><a class="header-anchor" href="#java-线程池" aria-hidden="true">#</a> Java 线程池</h3><blockquote><p><strong>关键词：<code>Executor</code>、<code>ExecutorService</code>、<code>ThreadPoolExecutor</code>、<code>Executors</code></strong></p></blockquote><h3 id="java-并发工具类" tabindex="-1"><a class="header-anchor" href="#java-并发工具类" aria-hidden="true">#</a> Java 并发工具类</h3><blockquote><p><strong>关键词：<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code></strong></p></blockquote><h3 id="java-内存模型" tabindex="-1"><a class="header-anchor" href="#java-内存模型" aria-hidden="true">#</a> Java 内存模型</h3><blockquote><p><strong>关键词：<code>JMM</code>、<code>volatile</code>、<code>synchronized</code>、<code>final</code>、<code>Happens-Before</code>、<code>内存屏障</code></strong></p></blockquote><h2 id="📚-资料" tabindex="-1"><a class="header-anchor" href="#📚-资料" aria-hidden="true">#</a> 📚 资料</h2>',27),r={href:"https://github.com/CL0610/Java-concurrency",target:"_blank",rel:"noopener noreferrer"},t=(0,c.Uk)("Java 并发知识点总结"),i=(0,c.Uk)(" - GitHub@CL0610"),n={},l=(0,o(3744).Z)(n,[["render",function(e,a){const o=(0,c.up)("OutboundLink");return(0,c.wg)(),(0,c.iD)(c.HY,null,[d,(0,c._)("ul",null,[(0,c._)("li",null,[(0,c._)("a",r,[t,(0,c.Wm)(o)]),i])])],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[o,c]of a)e[o]=c;return e}}}]);