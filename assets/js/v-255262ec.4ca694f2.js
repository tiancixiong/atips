"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[957],{7119:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-255262ec",path:"/software/ide/idea/basic-course/debug-skills.html",title:"Debug 技巧",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"按钮介绍",slug:"按钮介绍",children:[]},{level:2,title:"断点类型",slug:"断点类型",children:[{level:3,title:"字段断点",slug:"字段断点",children:[]}]},{level:2,title:"条件断点",slug:"条件断点",children:[]},{level:2,title:"多线程调试",slug:"多线程调试",children:[]},{level:2,title:"断点处添加 log",slug:"断点处添加-log",children:[]},{level:2,title:"远程调试",slug:"远程调试",children:[{level:3,title:"准备工作",slug:"准备工作",children:[]},{level:3,title:"本地配置",slug:"本地配置",children:[]},{level:3,title:"服务器配置",slug:"服务器配置",children:[]},{level:3,title:"开始调试",slug:"开始调试",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"software/ide/idea/basic-course/debug-skills.md",git:{updatedTime:1719836412e3,contributors:[{name:"TianCi.Xiong",email:"support@xiongtianci.com",commits:5},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:2}]}}},1474:(n,a,s)=>{s.r(a),s.d(a,{default:()=>D});var t=s(6252);const e=(0,t.uE)('<h1 id="debug-技巧" tabindex="-1"><a class="header-anchor" href="#debug-技巧" aria-hidden="true">#</a> Debug 技巧</h1><blockquote><p>以下内容基于的环境：Windows10、IntelliJ IDEA 2019.3</p></blockquote><h2 id="按钮介绍" tabindex="-1"><a class="header-anchor" href="#按钮介绍" aria-hidden="true">#</a> 按钮介绍</h2><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008132848557.png" alt="image-20211008132848557"></p><table><thead><tr><th>按钮</th><th>名称</th><th>说明</th><th>win快捷键</th></tr></thead><tbody><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113026757.png" alt="image-20211008113026757"></td><td>Show Execution Point</td><td>跳转到当前执行端点。</td><td>Alt + F10</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008112923775.png" alt="image-20211008112923775"></td><td>Step Over</td><td>步过，一行一行地往下走。如果这一行上有调用方法，执行时不会进入方法。</td><td>F8</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113141117.png" alt="image-20211008113141117"></td><td>Step Into</td><td>步入，进入代码或者说进入到方法内部。</td><td>F7</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113156179.png" alt="image-20211008113156179"></td><td>Force Step Into</td><td>强制步入，强制进入代码或者说进入到方法内部。能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</td><td>Alt + Shift + F7</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113222794.png" alt="image-20211008113222794"></td><td>Step Out</td><td>步出，跳到下一个断点或者跳出方法。从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</td><td>Shift + F8</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113236857.png" alt="image-20211008113236857"></td><td>Drop Frame</td><td>回退断点。回退到当前方法的调用处。</td><td></td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113248420.png" alt="image-20211008113248420"></td><td>Run to Cursor</td><td>运行到光标处。你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</td><td>Alt + F9</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113312307.png" alt="image-20211008113312307"></td><td>Evaluate Expression</td><td>表达式评估。可以改变变量的值，这样有时候就能很方便我们去调试各种值的情况了。</td><td>Alt + F8</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008113325993.png" alt="image-20211008113325993"></td><td>Trace Current Stream Chain</td><td>流式编程调试插件，对 Stream API 的调试。属于IDEA自带的插件。</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008155114989.png" alt="image-20211008155114989"></td><td>Resume Program</td><td>恢复程序运行，直至下个断点或程序运行结束</td><td>F9</td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008131605522.png" alt="image-20211008131605522"></td><td>View Breakpoints</td><td>查看断点，展示更多高级设置</td><td></td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008131629572.png" alt="image-20211008131629572"></td><td>Mute Breakpoints</td><td>置灰所有断点，再次点击，恢复</td><td></td></tr><tr><td><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008131700999.png" alt="image-20211008131700999"></td><td>Get thread dunp</td><td>获得当前的线程堆栈</td><td></td></tr></tbody></table><hr><p>其他 debug 快捷键</p><table><thead><tr><th>win快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Shift + F7</td><td>智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法。</td></tr><tr><td>Ctrl + Shift + F8</td><td>指定断点进入条件</td></tr></tbody></table><h2 id="断点类型" tabindex="-1"><a class="header-anchor" href="#断点类型" aria-hidden="true">#</a> 断点类型</h2><p>断点有四种类型：</p><ol><li>行断点（Line Breakpoints）：最经常用的方式， 可以设置在任何可执行的代码行上</li><li>方法断点（Method Breakpoints）： 在进入或退出指定的方法或其实现之一时挂起程序，允许您检查方法的进入/退出条件</li><li>字段断点（Field Watchpoints）： 当指定的字段被读取或写入时，挂起程序。需要注意的是，默认只有写才会停下，想要让读取时也停下，需要右击断点，在<strong>Watch</strong>的<strong>Field access</strong>上打勾才行</li><li>异常断点（Exception Breakpoints）： 当抛出Throwable或其子类时挂起程序 。可以在 <strong>Run — View Breakpoints</strong> 中的 Java Exception Breakpoints 里添加异常的具体类型。这样的话，程序中一旦发生了这种异常马上就会停下来</li></ol><hr>',12),p=(0,t.Uk)("断点图标的"),o={href:"https://www.jetbrains.com/help/idea/using-breakpoints.html#breakpoint-types",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("类型"),l=(0,t.Uk)("和"),c={href:"https://www.jetbrains.com/help/idea/using-breakpoints.html#breakpoint-statuses",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("状态"),g=(0,t.Uk)("："),u=(0,t.uE)('<p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211014210420999.png" alt="img"></p><h3 id="字段断点" tabindex="-1"><a class="header-anchor" href="#字段断点" aria-hidden="true">#</a> 字段断点</h3><p>在 IDEA 中为某个字段添加断点，当字段值有修改时，可以自动跳到相应方法位置。</p><p>在字段定义地方 鼠标左键 添加断点（会出现「眼睛」的图标），在眼睛」图标上鼠标右键，然后在弹框中勾选上 <code>Field access</code> 和 <code>Field modification</code> 两个选项。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211014203737311.png" alt="image-20211014203737311"></p><ul><li><strong>Condition</strong>：定义断点进入条件</li><li><strong>Field access</strong>：字段被 <code>read</code> 时进行断点</li><li><strong>Field modification</strong>：字段被 <code>writte</code> 时进行断点</li></ul><h2 id="条件断点" tabindex="-1"><a class="header-anchor" href="#条件断点" aria-hidden="true">#</a> 条件断点</h2><p>点击 <code>View Breakpoints</code> <img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008131605522.png" alt="image-20211008131605522">按钮可进行设置进入断点的条件，如下图所示</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008141205676.png" alt="image-20211008141205676"></p><ul><li><strong>标注 1</strong>：<code>View Breakpoints</code>，查看断点，展示更多高级设置</li><li><strong>标注 2</strong>：<code>Java Line Breakpoints</code>，展示项目中设置的所有断点</li><li><strong>标注 3</strong>：<code>Conditions</code>，设置条件断点（右键单击断点处也可进行设置）</li><li><strong>标注 4</strong>：<code>Remove once hit</code>，临时断点，就是只断一次，一次之后断点就自动消失了，不用手动取消</li><li><strong>标注 5</strong>：<code>Pass count </code>，设置当循环若干次后，进入断点，常用于循环语句</li></ul><h2 id="多线程调试" tabindex="-1"><a class="header-anchor" href="#多线程调试" aria-hidden="true">#</a> 多线程调试</h2><p>可对断点添加条件，如：<code>currentThread().getName().equals(&quot;线程2&quot;)</code> ，这样就能只挂起符合条件的线程</p><p>如下面所示，此条件确保调试器仅在当前线程的名称为 <strong>线程2</strong> 时才暂停当前线程</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211008153010240.png" alt="image-20211008153010240"></p><h2 id="断点处添加-log" tabindex="-1"><a class="header-anchor" href="#断点处添加-log" aria-hidden="true">#</a> 断点处添加 log</h2><p>在调试代码时希望打印一些内容。通过代码 <code>print</code> 的方式在调试完后还需要删除掉，防止提交到线上。</p><p>IDEA 提供 <code>Evaluate and Log at Breakpoints</code> 功能可以帮助我们解决这个问题。</p><p>在正常加断点的地方使用 <code>Shift + 鼠标左键</code> 添加外观是黄色的断点，并弹出选项。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211014201735696.png" alt="image-20211014201735696"></p><p>勾选上 <code>Evaluate and log</code>，输入想查看的 log/变量，以 <em>Debug</em> 模式运行程序（正常模式运行，不会打印这些 log）。</p><p>其他选项：</p><ul><li><strong>&quot;Breakpoint hit&quot; message</strong>：在断点触发了会打印一条日志消息，如 <code>Breakpoint reached at ocean.Whale.main(Whale.java:5)</code>；</li><li><strong>Stack trace</strong>：堆栈跟踪，会同时打印队栈信息；</li><li><strong>Evaluate and log</strong>：计算表达式，将结果输出到控制台。这个表达式不仅可以是一般变量或参数，也可以是方法，当你的一行代码中调用了几个方法时，就可以通过这种方式查看查看某个方法的返回值。</li></ul><h2 id="远程调试" tabindex="-1"><a class="header-anchor" href="#远程调试" aria-hidden="true">#</a> 远程调试</h2>',23),d=(0,t.Uk)("官方文档："),k={href:"https://www.jetbrains.com/help/idea/tutorial-remote-debug.html",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("Remote debug"),b=(0,t.uE)('<h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h3><ul><li>明确远程服务器的 IP 地址。这里演示使用<code>localhost</code></li><li>关掉服务器防火墙：<code>service iptables stop</code>。演示使用的是window环境，通过 控制面板-&gt;防火墙 关闭。</li></ul><p>创建演示项目<code>test_2110</code>，编写一个返回String类型的get请求</p><p>1、使用idea进行创建后，在 <code>pom.xml</code> 中引入springboot有关依赖：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>构建工具：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>打包方式选择jar</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>test_2110<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>test_2110<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>练习IDEA远程debug功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 <code>application.yml</code> 中配置服务端口：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8099</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2、启动类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>3、在Controller中编写一个get接口</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getTitle&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str = &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>4、使用maven打包，在项目目录的 <code>target</code> 目录中生成 jar 包</p><h3 id="本地配置" tabindex="-1"><a class="header-anchor" href="#本地配置" aria-hidden="true">#</a> 本地配置</h3><p>IDEA中设置远程调试，点击 <code>Edit Configurations</code> 进入 <code>Run/Debug Configuration</code> 界面</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211009141011294.png" alt="image-20211009141011294"></p><p>然后点击左上角的 <code>+</code> ，选择 <code>Remote</code> 后在右侧设置属性：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211009133025343.png" alt="image-20211009133025343"></p><ul><li><p><strong>标注 1</strong>：调试模式，默认为<code>Attach</code></p><ul><li><code>Attach</code>：调试服务端（被调试远程运行的机器）启动一个端口等待我们（调试客户端）去连接</li><li><code>Listen</code>：我们（调试客户端）去监听一个端口，当调试服务端准备好了，就会进行连接</li></ul></li><li><p><strong>标注 2</strong>：传输方式，默认为<code>Socket</code></p><ul><li><code>Socket</code>：macOS 及 Linux 系统使用此种传输方式</li><li><code>Shared memory</code>： Windows 系统使用此种传输方式</li></ul></li><li><p><strong>标注 3</strong>：服务器 IP 地址，默认为<code>localhost</code>，需要修改为目标服务器的真实 IP 地址</p></li><li><p><strong>标注 4</strong>：服务器端口号，默认为<code>5005</code>，需要修改为目标服务器的真实端口号</p></li><li><p><strong>标注 5</strong>：运行远程 JVM 的命令行参数</p><ul><li><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>-agentlib:jdwp=transport=dt_shmem,server=y,suspend=n,address=...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul></li></ul><h3 id="服务器配置" tabindex="-1"><a class="header-anchor" href="#服务器配置" aria-hidden="true">#</a> 服务器配置</h3><h4 id="_1-对于-springboot" tabindex="-1"><a class="header-anchor" href="#_1-对于-springboot" aria-hidden="true">#</a> 1.对于 SpringBoot</h4><p>由于笔者演示的服务器是本地的windows，而在上述参数中 <strong>标注 2</strong> 选择默认的 <code>Socket</code> 方式。这里就需要用 <strong>Git Bath</strong> 进行启动：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>java -agentlib:jdwp<span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>n,address<span class="token operator">=</span><span class="token number">5005</span> -jar test_2110-0.0.1-SNAPSHOT.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><p>由于 <strong>标注 2</strong> 选择默认的 <code>Socket</code> 方式，在windows中如果使用黑窗口启动就会一直报错：<code>ERROR: transport error 202: gethostbyname: unknown host</code></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211014101455014.png" alt="image-20211014101455014"></p><h4 id="_2-对于-tomcat" tabindex="-1"><a class="header-anchor" href="#_2-对于-tomcat" aria-hidden="true">#</a> 2.对于 Tomcat</h4><p>命令行参数，然后导入到 Tomcat 的配置文件（Linux路径：<code>tomcat/bin/catalina.sh</code>，Windows路径：<code>catalina.bat</code>）中。</p><p>在该配置文件的最上面，添加我们刚刚复制的那句话</p><ul><li><p>Linux：<code>export JAVA_OPTS=&#39;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005&#39;</code></p></li><li><p>Windows：<code>set JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=...</code></p></li></ul><h3 id="开始调试" tabindex="-1"><a class="header-anchor" href="#开始调试" aria-hidden="true">#</a> 开始调试</h3><p>服务器启动好后，启动本地 Remote Server</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211009160827580.png" alt="image-20211009160827580"></p><p>如果连接成功，则会出现如下提示：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211009161153071.png" alt="image-20211009161153071"></p><hr><p>前提是本机得有项目的源码 ，在需要的地方打个断点，然后访问一个<strong>远程的url</strong>，断点就会停下来。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',41),h=(0,t.Uk)("官方文档："),v={href:"https://www.jetbrains.com/help/idea/debugging-code.html",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("Debug code"),f={href:"https://www.cnblogs.com/csh24/p/14724135.html",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("IDEA的Debug技巧"),j=(0,t.Uk)(" - 博客园"),y={href:"https://www.cnblogs.com/chiangchou/p/idea-debug.html",target:"_blank",rel:"noopener noreferrer"},S=(0,t.Uk)("在Intellij IDEA中使用Debug"),_=(0,t.Uk)(" - 博客园"),I={href:"https://segmentfault.com/a/1190000040017745",target:"_blank",rel:"noopener noreferrer"},A=(0,t.Uk)("Intellij IDEA 调试魔法"),E=(0,t.Uk)(" - 公众号"),q={},D=(0,s(3744).Z)(q,[["render",function(n,a){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,(0,t._)("a",o,[i,(0,t.Wm)(s)]),l,(0,t._)("a",c,[r,(0,t.Wm)(s)]),g]),u,(0,t._)("blockquote",null,[(0,t._)("p",null,[d,(0,t._)("a",k,[m,(0,t.Wm)(s)])])]),b,(0,t._)("ul",null,[(0,t._)("li",null,[h,(0,t._)("a",v,[w,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",f,[x,(0,t.Wm)(s)]),j]),(0,t._)("li",null,[(0,t._)("a",y,[S,(0,t.Wm)(s)]),_]),(0,t._)("li",null,[(0,t._)("a",I,[A,(0,t.Wm)(s)]),E])])],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,t]of a)n[s]=t;return n}}}]);