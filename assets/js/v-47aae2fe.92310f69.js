"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[9840],{4023:(t,e,l)=>{l.r(e),l.d(e,{data:()=>o});const o={key:"v-47aae2fe",path:"/database/nosql-mongodb/mongodb-basic.html",title:"MongoDB入门 - 基础概念",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是NoSQL？",slug:"什么是nosql",children:[{level:3,title:"为什么使用NoSQL？",slug:"为什么使用nosql",children:[]},{level:3,title:"NoSQL数据库的简要历史",slug:"nosql数据库的简要历史",children:[]},{level:3,title:"NoSQL的功能",slug:"nosql的功能",children:[]}]},{level:2,title:"什么是MongoDB",slug:"什么是mongodb",children:[{level:3,title:"为什么使用MongoDB",slug:"为什么使用mongodb",children:[]},{level:3,title:"MongoDB 发展",slug:"mongodb-发展",children:[]},{level:3,title:"MongoDB 特性",slug:"mongodb-特性",children:[]},{level:3,title:"MongoDB 功能",slug:"mongodb-功能",children:[]},{level:3,title:"MongoDB与RDBMS区别",slug:"mongodb与rdbms区别",children:[]}]},{level:2,title:"MongoDB 概念",slug:"mongodb-概念",children:[{level:3,title:"数据库",slug:"数据库",children:[]},{level:3,title:"文档",slug:"文档",children:[]},{level:3,title:"集合",slug:"集合",children:[]},{level:3,title:"元数据",slug:"元数据",children:[]}]},{level:2,title:"MongoDB 数据类型",slug:"mongodb-数据类型",children:[]}],filePathRelative:"database/nosql-mongodb/mongodb-basic.md",git:{updatedTime:1719836412e3,contributors:[{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:2}]}}},3913:(t,e,l)=>{l.r(e),l.d(e,{default:()=>i});const o=(0,l(6252).uE)('<h1 id="mongodb入门-基础概念" tabindex="-1"><a class="header-anchor" href="#mongodb入门-基础概念" aria-hidden="true">#</a> MongoDB入门 - 基础概念</h1><h2 id="什么是nosql" tabindex="-1"><a class="header-anchor" href="#什么是nosql" aria-hidden="true">#</a> 什么是NoSQL？</h2><p>NoSQL 是一种非关系型DMS，不需要固定的架构，可以避免 joins 链接，并且易于扩展。NoSQL 数据库用于具有庞大数据存储需求的分布式数据存储。NoSQL 用于大数据和实时 Web 应用程序。例如，像Twitter，Facebook，Google 这样的大型公司，每天可能产生 TB 级的用户数据。</p><p>NoSQL 数据库代表“<strong>不仅仅是SQL</strong>”或“不是SQL”。虽然 NoRELNoSQL 会是一个更好的名词。Carl Strozz 在 1998 年引入了 NoSQL 概念。</p><p>传统的 RDBMS 使用 SQL 语法来存储和查询数据。相反，NoSQL 数据库系统包含可存储结构化，半结构化，非结构化和多态数据的多种数据库技术。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-mongodb/mongo-x-basic-1.png" alt="img"></p><h3 id="为什么使用nosql" tabindex="-1"><a class="header-anchor" href="#为什么使用nosql" aria-hidden="true">#</a> 为什么使用NoSQL？</h3><p>NoSQL 数据库的概念在处理大量数据的互联网巨头（例如 Google，Facebook，Amazon 等）中变得很流行。使用 RDBMS 处理海量数据时，系统响应时间变慢。</p><p>为了解决此问题，当然可以通过升级现有硬件来“横向扩展”我们的系统。但这个成本很高。</p><p>这个问题的替代方案是在负载增加时将数据库负载分配到多个主机上。这种方法称为“横向扩展”。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-mongodb/mongo-x-basic-2.png" alt="img"></p><p>NoSQL 数据库是非关系数据库，因此在设计时考虑到 Web 应用程序，比关系数据库更好地扩展。</p><h3 id="nosql数据库的简要历史" tabindex="-1"><a class="header-anchor" href="#nosql数据库的简要历史" aria-hidden="true">#</a> NoSQL数据库的简要历史</h3><ul><li>1998年 - Carlo Strozzi在他的轻量级开源关系数据库中使用术语NoSQL</li><li>2000年 - 图形数据库Neo4j启动</li><li>2004年 - 推出Google BigTable</li><li>2005年 - 启动CouchDB</li><li>2007年 - 发布有关Amazon Dynamo的研究论文</li><li>2008年 - Facebook开源Cassandra项目</li><li>2009年 - 重新引入NoSQL术语</li></ul><h3 id="nosql的功能" tabindex="-1"><a class="header-anchor" href="#nosql的功能" aria-hidden="true">#</a> NoSQL的功能</h3><ul><li><strong>非关系</strong><ul><li>NoSQL 数据库从不遵循关系模型</li><li>切勿为 tables 提供固定的固定列记录</li><li>使用自包含的聚合或 BLOB</li><li>不需要对象关系映射和数据规范化</li><li>没有复杂的功能，例如查询语言，查询计划者，</li><li>参照完整性联接，ACID</li></ul></li><li><strong>动态架构</strong><ul><li>NoSQL 数据库是无模式的或具有宽松模式的数据库</li><li>不需要对数据架构进行任何形式的定义</li><li>提供同一域中的异构数据结构</li></ul></li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-mongodb/mongo-x-basic-3.png" alt="img"></p><ul><li><strong>简单的API</strong><ul><li>提供易于使用的界面，用于存储和查询提供的数据</li><li>API允许进行低级数据操作和选择方法</li><li>基于文本的协议，通常与带有JSON的HTTP REST一起使用</li><li>多数不使用基于标准的查询语言</li><li>支持Web的数据库作为面向互联网的服务运行</li></ul></li><li><strong>分布式</strong><ul><li>可以以分布式方式执行多个NoSQL数据库</li><li>提供自动缩放和故障转移功能</li><li>通常可牺牲ACID概念来实现可伸缩性和吞吐量</li><li>分布式节点之间几乎没有同步复制，多为异步多主复制，对等，HDFS复制</li><li>仅提供最终的一致性</li><li>无共享架构。这样可以减少协调并提高分布。</li></ul></li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-mongodb/mongo-x-basic-4.png" alt="img"></p><h2 id="什么是mongodb" tabindex="-1"><a class="header-anchor" href="#什么是mongodb" aria-hidden="true">#</a> 什么是MongoDB</h2><p>MongoDB 是面向文档的 NoSQL 数据库，是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。。MongoDB是一个在2000年代中期问世的数据库。属于NoSQL数据库的类别。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="为什么使用mongodb" tabindex="-1"><a class="header-anchor" href="#为什么使用mongodb" aria-hidden="true">#</a> 为什么使用MongoDB</h3><p>以下是一些为什么应该开始使用MongoDB的原因：</p><ul><li><strong>面向文档的</strong>–由于MongoDB是NoSQL类型的数据库，它不是以关系类型的格式存储数据，而是将数据存储在文档中。这使得MongoDB非常灵活，可以适应实际的业务环境和需求。</li><li><strong>临时查询</strong>-MongoDB支持按字段，范围查询和正则表达式搜索。可以查询返回文档中的特定字段。</li><li><strong>索引</strong>-可以创建索引以提高MongoDB中的搜索性能。MongoDB文档中的任何字段都可以建立索引。</li><li><strong>复制</strong>-MongoDB可以提供副本集的高可用性。副本集由两个或多个mongo数据库实例组成。每个副本集成员可以随时充当主副本或辅助副本的角色。主副本是与客户端交互并执行所有读/写操作的主服务器。辅助副本使用内置复制维护主数据的副本。当主副本发生故障时，副本集将自动切换到辅助副本，然后它将成为主服务器。</li><li><strong>负载平衡</strong>-MongoDB使用分片的概念，通过在多个MongoDB实例之间拆分数据来水平扩展。MongoDB可以在多台服务器上运行，以平衡负载或复制数据，以便在硬件出现故障时保持系统正常运行。</li></ul><h3 id="mongodb-发展" tabindex="-1"><a class="header-anchor" href="#mongodb-发展" aria-hidden="true">#</a> MongoDB 发展</h3><ul><li>1.x - 支持复制和分片</li><li>2.x - 更丰富的数据库功能</li><li>3.x - WiredTiger 和周边生态</li><li>4.x - 支持分布式事务</li></ul><h3 id="mongodb-特性" tabindex="-1"><a class="header-anchor" href="#mongodb-特性" aria-hidden="true">#</a> MongoDB 特性</h3><ul><li>数据是 JSON 结构 <ul><li>支持结构化、半结构化数据模型</li><li>可以动态响应结构变化</li></ul></li><li>通过副本机制提供高可用</li><li>通过分片提供扩容能力</li></ul><h3 id="mongodb-功能" tabindex="-1"><a class="header-anchor" href="#mongodb-功能" aria-hidden="true">#</a> MongoDB 功能</h3><p>每个数据库都包含集合，而集合又包含文档。每个文档可以具有不同数量的字段。每个文档的大小和内容可以互不相同。 文档结构更符合开发人员如何使用各自的编程语言构造其类和对象。开发人员经常会说他们的类不是行和列，而是具有键值对的清晰结构。 从NoSQL数据库的简介中可以看出，行（或在MongoDB中调用的文档）不需要预先定义架构。相反，可以动态创建字段。 MongoDB中可用的数据模型使我们可以更轻松地表示层次结构关系，存储数组和其他更复杂的结构。 可伸缩性– MongoDB环境具有很高的可伸缩性。全球各地的公司已经定义了自己的集群，其中一些集群运行着100多个节点，数据库中包含大约数百万个文档。</p><h3 id="mongodb与rdbms区别" tabindex="-1"><a class="header-anchor" href="#mongodb与rdbms区别" aria-hidden="true">#</a> MongoDB与RDBMS区别</h3><table><thead><tr><th>特性</th><th>MongoDB</th><th>RDBMS</th></tr></thead><tbody><tr><td>数据模型</td><td>文档模型</td><td>关系型</td></tr><tr><td>CRUD 操作</td><td>MQL/SQL</td><td>SQL</td></tr><tr><td>高可用</td><td>复制集</td><td>集群模式</td></tr><tr><td>扩展性</td><td>支持分片</td><td>数据分区</td></tr><tr><td>扩繁方式</td><td>垂直扩展+水平扩展</td><td>垂直扩展</td></tr><tr><td>索引类型</td><td>B 树、全文索引、地理位置索引、多键索引、TTL 索引</td><td>B 树</td></tr><tr><td>数据容量</td><td>没有理论上限</td><td>千万、亿</td></tr></tbody></table><h2 id="mongodb-概念" tabindex="-1"><a class="header-anchor" href="#mongodb-概念" aria-hidden="true">#</a> MongoDB 概念</h2><p>下表将帮助您更容易理解 Mongo 中的一些概念：</p><table><thead><tr><th>SQL 术语/概念</th><th>MongoDB 术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB自动将 <code>_id</code> 字段设置为主键</td></tr></tbody></table><p><strong>常用术语</strong>：</p><ul><li><strong>_id</strong> – 这是每个MongoDB文档中必填的字段。_id字段表示MongoDB文档中的唯一值。_id字段类似于文档的主键。如果创建的新文档中没有_id字段，MongoDB将自动创建该字段。</li><li><strong>集合</strong> – 这是MongoDB文档的分组。集合等效于在任何其他RDMS（例如Oracle或MS SQL）中创建的表。集合存在于单个数据库中。从介绍中可以看出，集合不强制执行任何结构。</li><li><strong>游标</strong> – 这是指向查询结果集的指针。客户可以遍历游标以检索结果。</li><li><strong>数据库</strong> – 这是像RDMS中那样的集合容器，其中是表的容器。每个数据库在文件系统上都有其自己的文件集。MongoDB服务器可以存储多个数据库。</li><li><strong>文档</strong> - MongoDB集合中的记录基本上称为文档。文档包含字段名称和值。</li><li><strong>字段</strong> - 文档中的名称/值对。一个文档具有零个或多个字段。字段类似于关系数据库中的列。</li></ul><p>下图显示了带有键值对的字段的示例。如下的例子中，<code>OrderID: 111</code> 是文档中定义的键值对之一。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-mongodb/mongo-x-basic-5.png" alt="img"></p><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3><p>一个 MongoDB 中可以建立多个数据库。</p><p>MongoDB 的默认数据库为 <code>db</code>，该数据库存储在 data 目录中。</p><p>MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p><code>show dbs</code> 命令可以显示所有数据的列表。</p><p><code>db</code> 命令可以显示当前数据库对象或集合。</p><p><code>use</code> 命令可以连接到一个指定的数据库。</p><p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意 UTF-8 字符串：</p><ul><li>不能是空字符串（&quot;&quot;)。</li><li>不得含有 空格、<code>.</code>、<code>\\$</code>、<code>/</code>、<code>\\</code>和 <code>\\0</code> (空字符)。</li><li>应全部小写。</li><li>最多 64 字节。</li></ul><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：</p><ul><li><strong>admin</strong>：从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器；</li><li><strong>local</strong>：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合；</li><li><strong>config</strong>：当 Mongo 用于分片设置时，config 数据库在内部使用，用于保存分片的相关信息。</li></ul><h3 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h3><p>文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>需要注意的是：</p><ul><li>文档中的键/值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB 区分类型和大小写。</li><li>MongoDB 的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意 UTF-8 字符。</li></ul><p>文档键命名规范：</p><ul><li>键不能含有 <code>\\0</code> (空字符)。这个字符用来表示键的结尾。</li><li><code>.</code> 和 <code>$</code> 有特别的意义，只有在特定环境下才能使用。</li><li>以下划线 <code>_</code> 开头的键是保留的(不是严格要求的)。</li></ul><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><p>合法的集合名：</p><ul><li>集合名不能是空字符串&quot;&quot;。</li><li>集合名不能含有 <code>\\0</code> 字符（空字符)，这个字符表示集合名的结尾。</li><li>集合名不能以&quot;system.&quot;开头，这是为系统集合保留的前缀。</li><li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现 <code>$</code>。</li></ul><h3 id="元数据" tabindex="-1"><a class="header-anchor" href="#元数据" aria-hidden="true">#</a> 元数据</h3><p>数据库的信息是存储在集合中。它们使用了系统的命名空间：<code>dbname.system.*</code></p><p>在 MongoDB 数据库中名字空间 <code>&lt;dbname&gt;.system.*</code> 是包含多种系统信息的特殊集合(Collection)，如下:</p><table><thead><tr><th style="text-align:left;">集合命名空间</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">dbname.system.namespaces</td><td style="text-align:left;">列出所有名字空间。</td></tr><tr><td style="text-align:left;">dbname.system.indexes</td><td style="text-align:left;">列出所有索引。</td></tr><tr><td style="text-align:left;">dbname.system.profile</td><td style="text-align:left;">包含数据库概要(profile)信息。</td></tr><tr><td style="text-align:left;">dbname.system.users</td><td style="text-align:left;">列出所有可访问数据库的用户。</td></tr><tr><td style="text-align:left;">dbname.local.sources</td><td style="text-align:left;">包含复制对端（slave）的服务器信息和状态。</td></tr></tbody></table><p>对于修改系统集合中的对象有如下限制。</p><p>在 <code>system.indexes</code> 插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的 drop index 命令将自动更新相关信息)。<code>system.users</code> 是可修改的。<code>system.profile</code> 是可删除的。</p><h2 id="mongodb-数据类型" tabindex="-1"><a class="header-anchor" href="#mongodb-数据类型" aria-hidden="true">#</a> MongoDB 数据类型</h2><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">String</td><td style="text-align:left;">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td style="text-align:left;">Integer</td><td style="text-align:left;">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">布尔值。用于存储布尔值（真/假）。</td></tr><tr><td style="text-align:left;">Double</td><td style="text-align:left;">双精度浮点值。用于存储浮点值。</td></tr><tr><td style="text-align:left;">Min/Max keys</td><td style="text-align:left;">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td style="text-align:left;">Array</td><td style="text-align:left;">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td style="text-align:left;">Timestamp</td><td style="text-align:left;">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td style="text-align:left;">Object</td><td style="text-align:left;">用于内嵌文档。</td></tr><tr><td style="text-align:left;">Null</td><td style="text-align:left;">用于创建空值。</td></tr><tr><td style="text-align:left;">Symbol</td><td style="text-align:left;">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td style="text-align:left;">Date</td><td style="text-align:left;">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td style="text-align:left;">Object ID</td><td style="text-align:left;">对象 ID。用于创建文档的 ID。</td></tr><tr><td style="text-align:left;">Binary Data</td><td style="text-align:left;">二进制数据。用于存储二进制数据。</td></tr><tr><td style="text-align:left;">Code</td><td style="text-align:left;">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td style="text-align:left;">Regular expression</td><td style="text-align:left;">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table>',70),d={},i=(0,l(3744).Z)(d,[["render",function(t,e){return o}]])},3744:(t,e)=>{e.Z=(t,e)=>{for(const[l,o]of e)t[l]=o;return t}}}]);