"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[3732],{8960:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-518c0431",path:"/java/concurrent/java-concurrent-keywords-synchronized.html",title:"关键字: synchronized",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"面试题",slug:"面试题",children:[]},{level:2,title:"synchronized 介绍",slug:"synchronized-介绍",children:[]},{level:2,title:"synchronized 的使用",slug:"synchronized-的使用",children:[{level:3,title:"对象锁",slug:"对象锁",children:[]},{level:3,title:"类锁",slug:"类锁",children:[]}]},{level:2,title:"synchronized 原理",slug:"synchronized-原理",children:[{level:3,title:"同步代码块",slug:"同步代码块",children:[]},{level:3,title:"修饰方法",slug:"修饰方法",children:[]}]},{level:2,title:"synchronized 与 Lock",slug:"synchronized-与-lock",children:[{level:3,title:"synchronized 的缺陷",slug:"synchronized-的缺陷",children:[]},{level:3,title:"Lock",slug:"lock",children:[]}]},{level:2,title:"synchronized 错误使用案例",slug:"synchronized-错误使用案例",children:[{level:3,title:"保护对象不对",slug:"保护对象不对",children:[]},{level:3,title:"锁粒度导致的问题",slug:"锁粒度导致的问题",children:[]}]},{level:2,title:"面试题",slug:"面试题-1",children:[{level:3,title:"1. 构造方法可以使用 synchronized 关键字修饰么？",slug:"_1-构造方法可以使用-synchronized-关键字修饰么",children:[]},{level:3,title:"2. 谈谈 synchronized 和 ReentrantLock 的区别",slug:"_2-谈谈-synchronized-和-reentrantlock-的区别",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"java/concurrent/java-concurrent-keywords-synchronized.md",git:{updatedTime:1701927383e3,contributors:[{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:1}]}}},7167:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var e=a(6252);const p=(0,e.uE)('<h1 id="关键字-synchronized" tabindex="-1"><a class="header-anchor" href="#关键字-synchronized" aria-hidden="true">#</a> 关键字: synchronized</h1><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><ul><li>Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例。</li><li>Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理。</li><li>Synchronized有什么样的缺陷? Java Lock是怎么弥补这些缺陷的。</li><li>Synchronized和Lock的对比，和选择?</li><li>Synchronized在使用时有何注意事项?</li><li>Synchronized修饰的方法在抛出异常时,会释放锁吗?</li><li>多个线程等待同一个Synchronized锁的时候，JVM如何选择下一个获取锁的线程?</li><li>Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法?</li><li>我想更加灵活地控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办?</li><li>什么是锁的升级和降级? 什么是JVM里的偏斜锁、轻量级锁、重量级锁?</li><li>不同的JDK中对Synchronized有何优化?</li></ul><h2 id="synchronized-介绍" tabindex="-1"><a class="header-anchor" href="#synchronized-介绍" aria-hidden="true">#</a> synchronized 介绍</h2><p><code>synchronized</code> 它可以把任意一个非 <code>NULL</code> 的对象当作锁。它属于独占式的悲观锁，同时属于可重入锁。</p><ul><li><strong>synchronized</strong> 是 Java 中的关键字，是 <strong>利用锁的机制来实现互斥同步的</strong>。</li><li><strong>synchronized 可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块</strong>。</li></ul><p>在 Java 早期版本中，<code>synchronized</code> 属于 <strong>重量级锁</strong>，效率低下。因为监视器锁（monitor）是依赖于底层的操作系统的 <code>Mutex Lock</code> 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。</p><p>在 Java 1.6 之后 Java 官方对从 JVM 层面对 <code>synchronized</code> 较大优化，所以现在的 <code>synchronized</code> 锁效率也优化得很不错了。JDK1.6 对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。</p><hr><p>如果不需要 <em>Lock</em> 、<em>ReadWriteLock</em> 所提供的高级同步特性，应该优先考虑使用 <em>synchronized</em> ，理由如下：</p><ul><li>Java 1.6 以后，synchronized 做了大量的优化，其性能已经与 <em>Lock</em> 、<em>ReadWriteLock</em> 基本上持平。从趋势来看，Java 未来仍将继续优化 <code>synchronized</code> ，而不是 <code>ReentrantLock</code> 。</li><li><em>ReentrantLock</em> 是 Oracle JDK 的 API，在其他版本的 JDK 中不一定支持；而 <em>synchronized</em> 是 JVM 的内置特性，所有 JDK 版本都提供支持。</li></ul><h2 id="synchronized-的使用" tabindex="-1"><a class="header-anchor" href="#synchronized-的使用" aria-hidden="true">#</a> synchronized 的使用</h2><p><code>synchronized</code> 关键字是解决并发问题常用解决方案，有以下三种使用方式:</p><ul><li><p>同步<strong>普通方法</strong>，锁的是当前对象；</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//业务代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>同步<strong>静态方法</strong>，锁的是当前 <code>Class</code> 对象；进入同步代码前要获得 <strong>当前 Class 的锁</strong>。因为静态成员不属于任何一个实例对象；</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//业务代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>同步代码块</strong>，锁的是 <code>()</code> 中的对象，对给定对象/类加锁；</p><ul><li><code>synchronized(this|object)</code> 表示进入同步代码块前要获得<strong>指定对象的锁</strong></li><li><code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>当前 class 的锁</strong></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//业务代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p><strong>总结：</strong></p><ul><li><code>synchronized</code> 关键字加到 <code>static</code> 静态方法上和 <code>synchronized(class)</code> 代码块上都是给 Class 类上锁；</li><li><code>synchronized</code> 关键字加到实例方法上是给对象实例上锁；</li><li>尽量不要使用 <code>synchronized(String a)</code> 因为 JVM 中，字符串常量池具有缓存功能！</li></ul><hr><p>在应用 <code>sychronized</code> 关键字时需要把握如下注意点：</p><ul><li>一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；</li><li>每个实例都对应有自己的一把锁（<code>this</code>），不同实例之间互不影响；例外：锁对象是 <code>*.class</code> 以及 synchronized 修饰的是 <code>static</code> 方法的时候，所有对象共用同一把锁；</li><li>synchronized 修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁。</li></ul><h3 id="对象锁" tabindex="-1"><a class="header-anchor" href="#对象锁" aria-hidden="true">#</a> 对象锁</h3><p>对象锁：包括方法锁（默认锁对象为 <code>this</code>，当前实例对象）和同步代码块锁（自己指定锁对象）。</p><ul><li><p><strong>代码块形式：手动指定锁定对象，也可以是 <code>this</code>，也可以是自定义的锁</strong></p></li><li><p><strong>方法锁形式：synchronized 修饰普通方法，锁对象默认为 <code>this</code></strong></p></li></ul><h3 id="类锁" tabindex="-1"><a class="header-anchor" href="#类锁" aria-hidden="true">#</a> 类锁</h3><p>类锁：指 <code>synchronize</code> 修饰静态的方法或指定锁对象为 Class 对象</p><h2 id="synchronized-原理" tabindex="-1"><a class="header-anchor" href="#synchronized-原理" aria-hidden="true">#</a> synchronized 原理</h2><p><em>synchronized</em> 代码块是由一对 <code>monitorenter</code> 和 <code>monitorexit</code> 指令进入、退出对象监视器（Monitor）实现对方法、同步块的同步的。<em>Monitor</em> 对象是同步的基本实现单元。</p><p>在 Java 6 之前，<em>Monitor</em> 的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作。</p><p>具体实现是在编译之后在同步方法调用前加入一个 <code>monitor.enter</code> 指令，在退出方法和异常处插入 <code>monitor.exit</code> 的指令。其本质就是对一个对象监视器（Monitor）进行获取，而这个获取过程具有排他性从而达到了同一时刻只能一个线程访问的目的。而对于没有获取到锁的线程将会阻塞到方法入口处，直到获取锁的线程 <code>monitor.exit</code> 之后才能尝试继续获取锁。流程图如下：</p><p><img src="img/5d313f638492c49210.jpg" alt="img"></p><h3 id="同步代码块" tabindex="-1"><a class="header-anchor" href="#同步代码块" aria-hidden="true">#</a> 同步代码块</h3><p>通过一段代码来演示:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSync</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">TestSync</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Synchronize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 <code>javac TestSync.java</code> 和 <code>javap -c TestSync.class</code> 可以查看编译之后的具体信息。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Compiled</span> from <span class="token string">&quot;TestSync.java&quot;</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>TestSync</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>TestSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Code</span><span class="token operator">:</span>\n       <span class="token number">0</span><span class="token operator">:</span> aload_0\n       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>\n       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Code</span><span class="token operator">:</span>\n       <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// class com/example/concurrent/TestSync</span>\n       <span class="token number">2</span><span class="token operator">:</span> dup\n       <span class="token number">3</span><span class="token operator">:</span> astore_1\n       <span class="token number">4</span><span class="token operator">:</span> monitorenter\n       <span class="token number">5</span><span class="token operator">:</span> getstatic     #<span class="token number">3</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>\n       <span class="token number">8</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String Synchronize</span>\n      <span class="token number">10</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>\n      <span class="token number">13</span><span class="token operator">:</span> aload_1\n      <span class="token number">14</span><span class="token operator">:</span> monitorexit\n      <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">23</span>\n      <span class="token number">18</span><span class="token operator">:</span> astore_2\n      <span class="token number">19</span><span class="token operator">:</span> aload_1\n      <span class="token number">20</span><span class="token operator">:</span> monitorexit\n      <span class="token number">21</span><span class="token operator">:</span> aload_2\n      <span class="token number">22</span><span class="token operator">:</span> athrow\n      <span class="token number">23</span><span class="token operator">:</span> <span class="token keyword">return</span>\n    <span class="token class-name">Exception</span> table<span class="token operator">:</span>\n       from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type\n           <span class="token number">5</span>    <span class="token number">15</span>    <span class="token number">18</span>   any\n          <span class="token number">18</span>    <span class="token number">21</span>    <span class="token number">18</span>   any\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>可以看到在同步块的入口和出口分别有 <code>monitorenter</code>、<code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。。</p><p>当执行 <code>monitorenter</code> 指令时，线程试图获取锁也就是获取 <strong>对象监视器 <code>monitor</code></strong> 的持有权。</p>',36),t=(0,e.Uk)("在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由 "),c={href:"https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("ObjectMonitor"),l=(0,e.Uk)(" 实现的。每个对象中都内置了一个 "),r=(0,e._)("code",null,"ObjectMonitor",-1),i=(0,e.Uk)("对象。"),u=(0,e._)("p",null,[(0,e.Uk)("另外，"),(0,e._)("code",null,"wait()、notify()"),(0,e.Uk)(" 等方法也依赖于 "),(0,e._)("code",null,"monitor"),(0,e.Uk)(" 对象，这就是为什么只有在同步的块或者方法中才能调用 "),(0,e._)("code",null,"wait/notify"),(0,e.Uk)(" 等方法，否则会抛出 "),(0,e._)("code",null,"java.lang.IllegalMonitorStateException"),(0,e.Uk)(" 的异常的原因。")],-1),k=(0,e.uE)('<p>在执行 <code>monitorenter</code> 时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。</p><p>在执行 <code>monitorexit</code> 指令后，将锁计数器设为 0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p><h3 id="修饰方法" tabindex="-1"><a class="header-anchor" href="#修饰方法" aria-hidden="true">#</a> 修饰方法</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public class TestSync2 {\n    public synchronized void method() {\n        System.out.println(&quot;synchronized 方法&quot;);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ javap -v TestSync2.class //输出行号、本地变量表信息、反编译汇编代码、当前类用到的常量池等信息\nClassfile /E:/Workspace_idea/java-learning-demo/src/main/java/com/example/concurrent/TestSync2.class\n  Last modified <span class="token number">2021</span>-11-18<span class="token punctuation">;</span> size <span class="token number">434</span> bytes\n  MD5 checksum 23ecd3ee5453cd3df64362eef0ac166c\n  Compiled from <span class="token string">&quot;TestSync2.java&quot;</span>\npublic class com.example.concurrent.TestSync2\n  minor version: <span class="token number">0</span>\n  major version: <span class="token number">52</span>\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   <span class="token comment">#1 = Methodref          #6.#14         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>\n   <span class="token comment">#2 = Fieldref           #15.#16        // java/lang/System.out:Ljava/io/PrintStream;</span>\n   <span class="token comment">#3 = String             #17            // synchronized 鏂规硶</span>\n   <span class="token comment">#4 = Methodref          #18.#19        // java/io/PrintStream.println:(Ljava/lang/String;)V</span>\n   <span class="token comment">#5 = Class              #20            // com/example/concurrent/TestSync2</span>\n   <span class="token comment">#6 = Class              #21            // java/lang/Object</span>\n   <span class="token comment">#7 = Utf8               &lt;init&gt;</span>\n   <span class="token comment">#8 = Utf8               ()V</span>\n   <span class="token comment">#9 = Utf8               Code</span>\n  <span class="token comment">#10 = Utf8               LineNumberTable</span>\n  <span class="token comment">#11 = Utf8               method</span>\n  <span class="token comment">#12 = Utf8               SourceFile</span>\n  <span class="token comment">#13 = Utf8               TestSync2.java</span>\n  <span class="token comment">#14 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span>\n  <span class="token comment">#15 = Class              #22            // java/lang/System</span>\n  <span class="token comment">#16 = NameAndType        #23:#24        // out:Ljava/io/PrintStream;</span>\n  <span class="token comment">#17 = Utf8               synchronized 鏂规硶</span>\n  <span class="token comment">#18 = Class              #25            // java/io/PrintStream</span>\n  <span class="token comment">#19 = NameAndType        #26:#27        // println:(Ljava/lang/String;)V</span>\n  <span class="token comment">#20 = Utf8               com/example/concurrent/TestSync2</span>\n  <span class="token comment">#21 = Utf8               java/lang/Object</span>\n  <span class="token comment">#22 = Utf8               java/lang/System</span>\n  <span class="token comment">#23 = Utf8               out</span>\n  <span class="token comment">#24 = Utf8               Ljava/io/PrintStream;</span>\n  <span class="token comment">#25 = Utf8               java/io/PrintStream</span>\n  <span class="token comment">#26 = Utf8               println</span>\n  <span class="token comment">#27 = Utf8               (Ljava/lang/String;)V</span>\n<span class="token punctuation">{</span>\n  public com.example.concurrent.TestSync2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V\n    flags: ACC_PUBLIC\n    Code:\n      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>\n         <span class="token number">0</span>: aload_0\n         <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>\n         <span class="token number">4</span>: <span class="token builtin class-name">return</span>\n      LineNumberTable:\n        line <span class="token number">7</span>: <span class="token number">0</span>\n\n  public synchronized void method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>\n         <span class="token number">0</span>: getstatic     <span class="token comment">#2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span>\n         <span class="token number">3</span>: ldc           <span class="token comment">#3                  // String synchronized 鏂规硶</span>\n         <span class="token number">5</span>: invokevirtual <span class="token comment">#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>\n         <span class="token number">8</span>: <span class="token builtin class-name">return</span>\n      LineNumberTable:\n        line <span class="token number">9</span>: <span class="token number">0</span>\n        line <span class="token number">10</span>: <span class="token number">8</span>\n<span class="token punctuation">}</span>\nSourceFile: <span class="token string">&quot;TestSync2.java&quot;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。JVM 通过该 <code>ACC_SYNCHRONIZED</code> 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用，其本质也是对对象监视器 monitor 的获取。</p><h2 id="synchronized-与-lock" tabindex="-1"><a class="header-anchor" href="#synchronized-与-lock" aria-hidden="true">#</a> synchronized 与 Lock</h2><h3 id="synchronized-的缺陷" tabindex="-1"><a class="header-anchor" href="#synchronized-的缺陷" aria-hidden="true">#</a> synchronized 的缺陷</h3><ul><li><strong>效率低</strong>：锁的释放情况少，只有代码执行完毕或者异常结束才会释放锁；试图获取锁的时候不能设定超时；不能中断一个正在使用锁的线程。相对而言，<em>Lock</em> 可以中断和设置超时；</li><li><strong>不够灵活</strong>：加锁和释放的时机单一，每个锁仅有一个单一的条件(某个对象)，相对而言，读写锁更加灵活；</li><li><strong>无法知道是否成功获得锁</strong>，相对而言，Lock可以拿到状态</li></ul><h3 id="lock" tabindex="-1"><a class="header-anchor" href="#lock" aria-hidden="true">#</a> Lock</h3><p><em>java.util.concurrent.locks.Lock</em> 接口中重要的方法：</p><ul><li><code>lock()</code>：加锁</li><li><code>unlock()</code>：解锁</li><li><code>tryLock()</code>：尝试获取锁，返回一个 boolean 值</li><li><code>tryLock(long,TimeUtil)</code>：尝试获取锁，可以设置超时</li></ul><p>多线程竞争一个锁时，其余未得到锁的线程只能不停的尝试获得锁，而不能中断。高并发的情况下会导致性能下降。ReentrantLock 的 <code>lockInterruptibly()</code> 方法可以优先考虑响应中断。 一个线程等待时间过长，它可以中断自己，然后 ReentrantLock 响应这个中断，不再让这个线程继续等待。有了这个机制，使用 ReentrantLock 时就不会像 synchronized 那样产生死锁了。</p><hr><ul><li><strong>使用Synchronized有哪些要注意的？</strong><ul><li>锁对象不能为空，因为锁的信息都保存在对象头里</li><li>作用域不宜过大，影响程序执行的速度，控制范围过大，编写代码也容易出错</li><li>避免死锁</li></ul></li><li><strong>synchronized是公平锁吗？</strong></li></ul><p>synchronized 实际上是非公平的，新来的线程有可能立即获得监视器，而在等待区中等候已久的线程可能再次等待，不过这种抢占的方式可以预防饥饿。</p><h2 id="synchronized-错误使用案例" tabindex="-1"><a class="header-anchor" href="#synchronized-错误使用案例" aria-hidden="true">#</a> synchronized 错误使用案例</h2><h3 id="保护对象不对" tabindex="-1"><a class="header-anchor" href="#保护对象不对" aria-hidden="true">#</a> 保护对象不对</h3><p>加锁前要清楚锁和被保护的对象是不是一个层面的。</p><p>静态字段属于<em>类</em>，类级别的锁才能保护；而非静态字段属于<em>类实例</em>，实例级别的锁就可以保护。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token keyword">synchronized</span>错误示例_保护对象不对 <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">synchronized</span>错误示例_保护对象不对 demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">synchronized</span>错误示例_保护对象不对<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">wrong</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重置Data.counter</span>\n        <span class="token comment">// 利用并行流，调用 Data.wrong() 方法count次</span>\n        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> locker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            counter<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>locker<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                counter<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>执行结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>892565\n1000000\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>发现 <code>Data.wrong()</code> 最后的结果总是小于 <code>Data.right()</code>。这个是因为 <code>wrong()</code> 方法是在普通方法上加锁，是属于实例对象；而 <code>Data.counter</code> 是静态变量，属于类。试图对一个静态变量加对象级别的 synchronized 锁，并不能保证线程安全。可以使用下面代码解决：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Data</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        counter<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="锁粒度导致的问题" tabindex="-1"><a class="header-anchor" href="#锁粒度导致的问题" aria-hidden="true">#</a> 锁粒度导致的问题</h3><p>要尽可能的缩小加锁的范围，这可以提高并发吞吐。</p><p>如果精细化考虑了锁应用范围后，性能还无法满足需求的话，我们就要考虑另一个维度的粒度问题了，即：区分读写场景以及资源的访问冲突，考虑使用悲观方式的锁还是乐观方式的锁。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token keyword">synchronized</span>错误案例_锁粒度不当 <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">synchronized</span>错误案例_锁粒度不当<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        demo<span class="token punctuation">.</span><span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        demo<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">slow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;耗时: {}ms&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token function">slow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;耗时: {}ms&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>执行结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[main] INFO com.example.syn.synchronized错误案例_锁粒度不当 - 耗时:10529\n[main] INFO com.example.syn.synchronized错误案例_锁粒度不当 - 耗时:2600\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="面试题-1" tabindex="-1"><a class="header-anchor" href="#面试题-1" aria-hidden="true">#</a> 面试题</h2><h3 id="_1-构造方法可以使用-synchronized-关键字修饰么" tabindex="-1"><a class="header-anchor" href="#_1-构造方法可以使用-synchronized-关键字修饰么" aria-hidden="true">#</a> 1. 构造方法可以使用 synchronized 关键字修饰么？</h3><p>先说结论：<strong>构造方法不能使用 synchronized 关键字修饰。</strong></p><p>构造方法本身就属于线程安全的，不存在同步的构造方法一说。</p><h3 id="_2-谈谈-synchronized-和-reentrantlock-的区别" tabindex="-1"><a class="header-anchor" href="#_2-谈谈-synchronized-和-reentrantlock-的区别" aria-hidden="true">#</a> 2. 谈谈 synchronized 和 ReentrantLock 的区别</h3><ul><li><p>两者都是可重入锁</p><p><strong>可重入锁</strong>指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。</p></li><li><p>synchronized 依赖于 JVM；而 ReentrantLock 依赖于 API</p><p><code>synchronized</code> 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 <code>synchronized</code> 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。<code>ReentrantLock</code> 是 JDK 层面实现的（也就是 API 层面，需要 <code>lock()</code> 和 <code>unlock()</code> 方法配合 <code>try/finally</code> 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p></li><li><p>ReentrantLock 比 synchronized 增加了一些高级功能</p><p>相比 <code>synchronized</code>，<code>ReentrantLock</code> 增加了一些高级功能。主要来说主要有三点：</p><ul><li><strong>等待可中断</strong>：<code>ReentrantLock</code> 提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现公平锁</strong>：<code>ReentrantLock</code> 可以指定是公平锁还是非公平锁。而 <code>synchronized</code> 只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。<code>ReentrantLock</code> 默认情况是非公平的，可以通过 <code>ReentrantLock</code> 类的 <code>ReentrantLock(boolean fair)</code> 构造方法来制定是否是公平的。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>：<code>synchronized</code> 关键字与 <code>wait()</code> 和<code>notify()/notifyAll()</code> 方法相结合可以实现等待/通知机制。<code>ReentrantLock</code> 类当然也可以实现，但是需要借助于 <code>Condition</code> 接口与 <code>newCondition()</code> 方法。</li></ul></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',38),b=(0,e._)("li",null,"https://crossoverjie.top/JCSprout/#/thread/Synchronize",-1),d={href:"https://snailclimb.gitee.io/javaguide/#/docs/java/concurrent/java%E5%B9%B6%E5%8F%91%E8%BF%9B%E9%98%B6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("github-javaguide"),h=(0,e._)("li",null,"https://www.cnblogs.com/wuqinglong/p/9945618.html",-1),g={},y=(0,a(3744).Z)(g,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("blockquote",null,[(0,e._)("p",null,[t,(0,e._)("a",c,[o,(0,e.Wm)(a)]),l,r,i]),u]),k,(0,e._)("ul",null,[b,(0,e._)("li",null,[(0,e._)("a",d,[m,(0,e.Wm)(a)])]),h])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);