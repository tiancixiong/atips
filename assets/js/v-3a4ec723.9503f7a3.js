"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[3020],{5451:(a,s,n)=>{n.r(s),n.d(s,{data:()=>e});const e={key:"v-3a4ec723",path:"/database/mysql/mysql-read-write-splitting.html",title:"MySQL - 读写分离",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是读写分离",slug:"什么是读写分离",children:[]},{level:2,title:"使用中间件实现",slug:"使用中间件实现",children:[{level:3,title:"Gaea简介",slug:"gaea简介",children:[]},{level:3,title:"MySql主从复制",slug:"mysql主从复制",children:[]},{level:3,title:"直接在Linux下安装",slug:"直接在linux下安装",children:[]},{level:3,title:"在Docker容器中运行",slug:"在docker容器中运行",children:[]},{level:3,title:"测试读写分离",slug:"测试读写分离",children:[]},{level:3,title:"结合SpringBoot使用",slug:"结合springboot使用",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"database/mysql/mysql-read-write-splitting.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:1}]}}},8797:(a,s,n)=>{n.r(s),n.d(s,{default:()=>i});var e=n(6252);const t=(0,e.uE)('<h1 id="mysql-读写分离" tabindex="-1"><a class="header-anchor" href="#mysql-读写分离" aria-hidden="true">#</a> MySQL - 读写分离</h1><p><strong>TODO</strong> 此案例由于在打包Docker镜像时go下载的依赖包需要搭梯子，中断了，没有成功搭建。</p><h2 id="什么是读写分离" tabindex="-1"><a class="header-anchor" href="#什么是读写分离" aria-hidden="true">#</a> 什么是读写分离</h2><p><strong>读写分离</strong>：指的是<strong>主服务器</strong>处理<em>写操作</em>以及实时性要求比较高的<em>读操作</em>，而<strong>从服务器</strong>处理<em>读操作</em>。</p><p>读写分离能提高性能的原因在于：</p><ul><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性。</li></ul><p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/image-20211102202811002.png" alt="image-20211102202811002"></p><h2 id="使用中间件实现" tabindex="-1"><a class="header-anchor" href="#使用中间件实现" aria-hidden="true">#</a> 使用中间件实现</h2><blockquote><p>传统的MySql读写分离方案是通过在代码中根据SQL语句的类型动态切换数据源来实现的，那么有没有什么中间件可以自动实现读写分离呢？小米开源的数据库中间件Gaea就可以实现，接下来我们将详细讲解如何使用Gaea来实现MySql的读写分离。</p></blockquote><h3 id="gaea简介" tabindex="-1"><a class="header-anchor" href="#gaea简介" aria-hidden="true">#</a> Gaea简介</h3><p>Gaea 是小米中国区电商研发部研发的基于 MySql 协议的数据库中间件，目前在小米商城大陆和海外得到广泛使用，包括订单、社区、活动等多个业务。Gaea支持分库分表、SQL路由、读写分离等基本特性，其中分库分表方案兼容了 mycat 和 kingshard 两个项目的路由方式。</p><h3 id="mysql主从复制" tabindex="-1"><a class="header-anchor" href="#mysql主从复制" aria-hidden="true">#</a> MySql主从复制</h3><p>使用 Gaea 需要依赖 MySql 的主从复制环境</p><h3 id="直接在linux下安装" tabindex="-1"><a class="header-anchor" href="#直接在linux下安装" aria-hidden="true">#</a> 直接在Linux下安装</h3><blockquote><p>目前官方提供的是在 Linux 下直接安装的方式，我们先按此方法来安装 Gaea。</p></blockquote><h4 id="安装go语言环境" tabindex="-1"><a class="header-anchor" href="#安装go语言环境" aria-hidden="true">#</a> 安装Go语言环境</h4><blockquote><p>由于 Gaea 是使用 Go 语言编写的，所以我们需要先安装Go语言的环境。</p></blockquote>',18),p=(0,e.Uk)("安装Go语言环境，下载地址："),l={href:"https://golang.org/dl/",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://golang.org/dl/"),r=(0,e.uE)('<p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_01.png" alt=""></p><ul><li>下载完成后解压到 <code>/mydata</code> 目录下；</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tar</span> -zxvf go1.13.5.linux-amd64.tar.gz -C /mydata/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>添加 <code>/mydata/go/bin</code> 目录到 PATH 变量中：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 编辑环境变量配置文件</span>\n<span class="token function">vim</span> /etc/profile\n\n<span class="token comment"># 在最后一行添加如下配置</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>/mydata/go\n<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOROOT</span>/bin\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://athens.azurefd.net\n\n<span class="token comment"># 刷新配置文件</span>\n<span class="token builtin class-name">source</span> /etc/profile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>查看版本号，测试是否安装成功：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>返回以下信息表示Go语言环境已经安装成功了：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go version go1.13.5 linux/amd64\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="安装gaea" tabindex="-1"><a class="header-anchor" href="#安装gaea" aria-hidden="true">#</a> 安装Gaea</h4><blockquote><p>由于Gaea并没有提供安装包，所以我们需要自行编译源码获取可执行文件。</p></blockquote><ul><li>下载Gaea的源码，直接下载 <code>tar.gz</code> 包到 <code>/mydata</code> 目录下，然后解压，下载地址：https://github.com/XiaoMi/Gaea</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tar</span> -zxvf Gaea-1.2.2.tar.gz\n<span class="token function">rm</span> -rf Gaea-1.2.2.tar.gz\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>进入 <code>/mydata/Gaea-1.2.2/</code> 目录下，使用 <code>make</code> 命令对源码编译：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> Gaea-1.2.2 <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>注意</strong>：由于网络问题，某些 Go 的依赖会下载不下来导致编译失败，多尝试几次即可成功；</p><p>如果报错：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cgo: C compiler &quot;gcc&quot; not found: exec: &quot;gcc&quot;: executable file not found in $PATH\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>则需要安装 gcc ，安装命令：<code>yum install gcc</code></p><ul><li><p>编译完成后在 <code>/mydata/Gaea-1.2.2/bin</code> 目录下会生成 Gaea 的执行文件 <code>gaea</code>：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xx mydata<span class="token punctuation">]</span><span class="token comment"># ll /mydata/Gaea-1.2.2/bin/</span>\n总用量 <span class="token number">40540</span>\n-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">23874237</span> <span class="token number">11</span>月  <span class="token number">3</span> <span class="token number">13</span>:26 gaea\n-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">17635041</span> <span class="token number">11</span>月  <span class="token number">3</span> <span class="token number">13</span>:26 gaea-cc\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>由于我们没有搭建 <code>etcd </code>配置中心，所以需要修改本地配置文件 <code>/mydata/Gaea-1.2.2/etc/gaea.ini</code>，将配置类型改为 <code>file</code>：<code>tar -zcvf Gaea-master.tar.gz Gaea-1.2.2</code></p></li></ul><div class="language-ini ext-ini line-numbers-mode"><pre class="language-ini"><code><span class="token comment">; 配置类型，目前支持file/etcd两种方式，file方式不支持热加载</span>\n<span class="token key attr-name">config_type</span><span class="token punctuation">=</span><span class="token value attr-value">file</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>添加namespace配置文件，用于配置我们的主从数据库信息，配置文件地址：<code>/mydata/Gaea-1.2.2/etc/file/namespace/mall_namespace_1.json</code></p></li><li><p>配置文件内容如下：</p></li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mall_namespace_1&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;online&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;read_only&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;allowed_dbs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;mall&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;slow_sql_time&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;black_sql&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;&quot;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;allowed_ip&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;slices&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;slice-0&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;user_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;master&quot;</span><span class="token operator">:</span> <span class="token string">&quot;192.168.220.132:3307&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;slaves&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;192.168.220.132:3308&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;statistic_slaves&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;capacity&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;max_capacity&quot;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;idle_timeout&quot;</span><span class="token operator">:</span> <span class="token number">60</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;shard_rules&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;users&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;user_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;macro&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;namespace&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mall_namespace_1&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;rw_flag&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;rw_split&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;other_property&quot;</span><span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;default_slice&quot;</span><span class="token operator">:</span> <span class="token string">&quot;slice-0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;global_sequences&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h4 id="namespace配置文件" tabindex="-1"><a class="header-anchor" href="#namespace配置文件" aria-hidden="true">#</a> namespace配置文件</h4><blockquote><p>namespace的配置格式为json，包含分表、非分表、实例等配置信息，都可在运行时改变。</p></blockquote><ul><li><p>整体配置说明：</p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>字段含义</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>namespace名称</td></tr><tr><td>online</td><td>bool</td><td>是否在线，逻辑上下线使用</td></tr><tr><td>read_only</td><td>bool</td><td>是否只读，namespace级别</td></tr><tr><td>allowed_dbs</td><td>map</td><td>允许通过代理访问的数据库</td></tr><tr><td>default_phy_dbs</td><td>map</td><td>默认数据库名, 与allowed_dbs一一对应</td></tr><tr><td>slow_sql_time</td><td>string</td><td>慢sql时间，单位ms</td></tr><tr><td>black_sql</td><td>string数组</td><td>黑名单sql</td></tr><tr><td>allowed_ip</td><td>string数组</td><td>白名单IP</td></tr><tr><td>slices</td><td>map数组</td><td>一主多从的物理实例，slice里map的具体字段可参照slice配置</td></tr><tr><td>shard_rules</td><td>map数组</td><td>分库、分表、特殊表的配置内容，具体字段可参照shard配置</td></tr><tr><td>users</td><td>map数组</td><td>应用端连接gaea所需要的用户配置，具体字段可参照users配置</td></tr></tbody></table></li><li><p>slice配置：</p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>字段含义</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>分片名称，自动、有序生成</td></tr><tr><td>user_name</td><td>string</td><td>数据库用户名</td></tr><tr><td>password</td><td>string</td><td>数据库密码</td></tr><tr><td>master</td><td>string</td><td>主实例地址</td></tr><tr><td>slaves</td><td>string数组</td><td>从数据库地址，可以配置多个</td></tr><tr><td>statistic_slaves</td><td>string数组</td><td>统计型从实例地址列表</td></tr><tr><td>capacity</td><td>int</td><td>gaea_proxy与每个实例的连接池大小</td></tr><tr><td>max_capacity</td><td>int</td><td>gaea_proxy与每个实例的连接池最大大小</td></tr><tr><td>idle_timeout</td><td>int</td><td>gaea_proxy与后端mysql空闲连接存活时间，单位:秒</td></tr></tbody></table></li><li><p>users配置：</p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>字段含义</th></tr></thead><tbody><tr><td>user_name</td><td>string</td><td>数据库代理用户名，客户端通过该用户名访问</td></tr><tr><td>password</td><td>string</td><td>数据库代理密码，客户端通过该用户名访问</td></tr><tr><td>namespace</td><td>string</td><td>对应的命名空间</td></tr><tr><td>rw_flag</td><td>int</td><td>读写标识, 只读=1, 读写=2</td></tr><tr><td>rw_split</td><td>int</td><td>是否读写分离, 非读写分离=0, 读写分离=1</td></tr><tr><td>other_property</td><td>int</td><td>目前用来标识是否走统计从实例, 普通用户=0, 统计用户=1</td></tr></tbody></table></li></ul><h3 id="在docker容器中运行" tabindex="-1"><a class="header-anchor" href="#在docker容器中运行" aria-hidden="true">#</a> 在Docker容器中运行</h3><blockquote><p>由于官方只提供了Linux下直接安装运行的方式，这里我们提供另一种运行方式，在Docker容器中作为服务运行。</p></blockquote><h4 id="打包成docker镜像" tabindex="-1"><a class="header-anchor" href="#打包成docker镜像" aria-hidden="true">#</a> 打包成Docker镜像</h4><blockquote><p>Docker Hub 中并没有打包好的Gaea镜像，我们需要自行构建一个，下面详细介绍下如何构建Gaea的Docker镜像。</p></blockquote><ul><li>这里我们使用Dockerfile构建Docker镜像，Dockerfile中的内容如下：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 创建Dockerfile</span>\n<span class="token function">touch</span> /mydata/Dockerfile\n<span class="token function">vi</span> /mydata/Dockerfile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>添加配置：</p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token comment"># 该镜像需要依赖的基础镜像</span>\n<span class="token instruction"><span class="token keyword">FROM</span> golang:latest</span>\n<span class="token comment"># 将当前目录下的gaea源码包复制到docker容器的/go/Gaea-master目录下，对于.tar.gz文件会自动解压</span>\n<span class="token instruction"><span class="token keyword">ADD</span> Gaea-1.2.2.tar.gz /go/Gaea-master</span>\n<span class="token comment"># 将解压后的源码移动到docker内容的/go/gaea目录中去</span>\n<span class="token instruction"><span class="token keyword">RUN</span> bash -c <span class="token string">&#39;mv /go/Gaea-master/Gaea-1.2.2 /go/gaea&#39;</span></span>\n<span class="token comment"># 进入docker内的/go/gaea目录</span>\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/gaea</span>\n<span class="token comment"># 将gaea源码进行打包编译</span>\n<span class="token instruction"><span class="token keyword">RUN</span> bash -c <span class="token string">&#39;make build&#39;</span></span>\n<span class="token comment"># 声明服务运行在13306端口</span>\n<span class="token instruction"><span class="token keyword">EXPOSE</span> 13306</span>\n<span class="token comment"># 指定docker容器启动时执行的命令</span>\n<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;/go/gaea/bin/gaea&quot;</span>]</span>\n<span class="token comment"># 指定维护者的名字</span>\n<span class="token instruction"><span class="token keyword">MAINTAINER</span> yolo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注意：Gaea-1.2.2.tar.gz 也是在 <code>/mydata</code> 目录下</p><ul><li>之后使用Docker命令构建Gaea的Docker镜像，在 <code>/mydata</code> 目录下执行（这个过程需使用梯子）：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker build -t gaea:1.2.2 <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>构建成功控制台输出：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_12.png" alt=""></p><ul><li>将本地安装的Gaea配置文件复制到<code>/mydata/gaea-docker/etc/</code>目录下：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> -r /mydata/gaea/etc/ /mydata/gaea-docker/etc/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>使用Docker命令启动Gaea容器：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -p <span class="token number">13306</span>:13306 --name gaea <span class="token punctuation">\\</span>\n-v /mydata/gaea-docker/etc:/go/gaea/etc <span class="token punctuation">\\</span>\n-d gaea:1.2.2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="测试读写分离" tabindex="-1"><a class="header-anchor" href="#测试读写分离" aria-hidden="true">#</a> 测试读写分离</h3><blockquote><p>测试思路：首先我们关闭从实例的主从复制，然后通过Gaea代理来操作数据库，插入一条数据，如果主实例中有这条数据而从实例中没有，说明写操作是走的主库。然后再通过Gaea代理查询该表数据，如果没有这条数据，表示读操作走的是从库，证明读写分离成功。</p></blockquote><ul><li>通过Navicat连接到Gaea代理，注意此处账号密码为Gaea的namespace中配置的内容，端口为Gaea的服务端口；</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_05.png" alt=""></p><ul><li>通过Navicat分别连接到主库和从库，用于查看数据，此时建立了以下三个数据库连接；</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_06.png" alt=""></p><ul><li>通过<code>stop slave</code>命令关闭<code>mysql-slave</code>实例的主从复制功能：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_07.png" alt=""></p><ul><li>通过Gaea代理在<code>test</code>表中插入一条数据：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_08.png" alt=""></p><ul><li>在主库中查看<code>test</code>表的数据，发现已有该数据：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_09.png" alt=""></p><ul><li>在从库中查看<code>test</code>表的数据，发现没有该数据，证明写操作走的是主库：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_10.png" alt=""></p><ul><li>直接在代理中查看<code>test</code>表中的数据，发现没有该数据，证明读操作走的是从库。</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/mysql/gaea_use_11.png" alt=""></p><h3 id="结合springboot使用" tabindex="-1"><a class="header-anchor" href="#结合springboot使用" aria-hidden="true">#</a> 结合SpringBoot使用</h3><p>在我们的SpringBoot应用中，我们只需要把Gaea的代理服务直接当做数据库服务来使用就可以实现读写分离了。这样就不用在代码中添加任何读写分离逻辑了，是不是很方便！</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><p>http://www.macrozheng.com/#/reference/gaea</p></li><li><p>gaea官方文档：https://github.com/XiaoMi/Gaea</p></li></ul>',63),c={},i=(0,n(3744).Z)(c,[["render",function(a,s){const n=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("ul",null,[(0,e._)("li",null,[p,(0,e._)("a",l,[o,(0,e.Wm)(n)])])]),r],64)}]])},3744:(a,s)=>{s.Z=(a,s)=>{for(const[n,e]of s)a[n]=e;return a}}}]);