"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[9402],{8235:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-db07cb7a",path:"/java/java1.8/java-8-stream.html",title:"Java 8 - 函数编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Lambda表达式",slug:"lambda表达式",children:[{level:3,title:"介绍",slug:"介绍",children:[]},{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"使用",slug:"使用",children:[]}]},{level:2,title:"Stream",slug:"stream",children:[{level:3,title:"parallelStream",slug:"parallelstream",children:[]},{level:3,title:"常用方法",slug:"常用方法",children:[]},{level:3,title:"distinct",slug:"distinct",children:[]}]},{level:2,title:"常用例子",slug:"常用例子",children:[{level:3,title:"匿名类简写",slug:"匿名类简写",children:[]},{level:3,title:"forEach",slug:"foreach",children:[]},{level:3,title:"方法引用",slug:"方法引用",children:[]},{level:3,title:"Collectors",slug:"collectors",children:[]}]},{level:2,title:"FunctionalInterface",slug:"functionalinterface",children:[{level:3,title:"理解注解 @FunctionInterface",slug:"理解注解-functioninterface",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"java/java1.8/java-8-stream.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2}]}}},1113:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6252);const p=(0,t.uE)('<h1 id="java-8-函数编程" tabindex="-1"><a class="header-anchor" href="#java-8-函数编程" aria-hidden="true">#</a> Java 8 - 函数编程</h1><p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p><p>核心思想：使用不可变值和函数，函数对一个值进行处理，映射成另一个值。</p><p>对核心类库的改进主要包括集合类的 API 和新引入的流 <em><strong>Stream</strong></em>。流使程序员可以站在更高的抽象层次上对集合进行操作。</p><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式" aria-hidden="true">#</a> Lambda表达式</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>Lambda 表达式(lambda expression)是一个匿名函数，lambda 表达式基于数学中的 <code>λ</code> 演算得名，直接对应于其中的 lambda 抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。</p><p>Lambda 表达式（也称为闭包）是整个Java 8发行版中最受期待的在Java语言层面上的改变，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中），或者把代码看成数据：函数式程序员对这一概念非常熟悉。在 JVM 平台上的很多语言（Groovy，Scala，……）从一开始就有 Lambda，但是 Java 程序员不得不使用毫无新意的匿名类来代替 lambda。</p><p><strong>Lambda 表达式与匿名类的区别</strong>：使用匿名类与 Lambda 表达式的一大区别在于关键词的使用。对于匿名类，关键词 this 解读为匿名类，而对于 Lambda 表达式，关键词 this 解读为写就 Lambda 的外部类。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p><strong>Lambda 表达式的基本语法</strong>：<code>(parameters) -&gt; expression</code> 或 <code>(parameters) -&gt;{ statements; }</code></p><p>Java lambda表达式的简单例子：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 1. 不需要参数,返回值为 5</span>\n<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">5</span>\n \n<span class="token comment">// 2. 接收一个参数(数字类型),返回其2倍的值</span>\nx <span class="token operator">-&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> x\n \n<span class="token comment">// 3. 接受2个参数(数字),并返回他们的差值</span>\n<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x – y\n \n<span class="token comment">// 4. 接收2个int型整数,返回他们的和</span>\n<span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y\n \n<span class="token comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)</span>\n<span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>一个 Lambda 表达式可以有零个或多个参数</li><li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：<code>(int a)</code> 与 <code>(a)</code> 效果相同</li><li>所有参数需包含在圆括号 <code>()</code> 内，参数之间用逗号 <code>,</code> 相隔。例如：<code>(a, b)</code> 或 <code>(int a, int b)</code> 或 <code>(String a, int b, float c)</code><ul><li>空圆括号代表参数集为空。例如：<code>() -&gt; 42</code></li><li>当只有一个参数，且其类型可推导时，圆括号 <code>()</code> 可省略。例如：<code>a -&gt; return a*a</code></li></ul></li><li>Lambda 表达式的主体可包含零条或多条语句 <ul><li>如果 Lambda 表达式的主体只有一条语句，花括号 <code>{}</code> 可省略。匿名函数的返回类型与该主体表达式一致</li><li>如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号 <code>{}</code> 中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li></ul></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><ul><li><p>lambda 表达式仅能放入如下代码：预定义使用了 <code>@Functional</code> 注释的函数式接口，自带一个抽象函数的方法，或者SAM(Single Abstract Method 单个抽象方法)类型。这些称为 lambda 表达式的目标类型，可以用作返回类型，或 lambda 目标代码的参数。例如，若一个方法接收 Runnable、Comparable 或者 Callable 接口，都有单个抽象方法，可以传入 lambda 表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式。</p></li><li><p>lambda 表达式内可以使用<strong>方法引用</strong>，仅当该方法不修改 lambda 表达式提供的参数。本例中的 lambda 表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用方法引用</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然而，若对参数有任何修改，则不能使用方法引用，而需键入完整地lambda表达式，如下所示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>事实上，可以省略这里的lambda参数的类型声明，编译器可以从列表的类属性推测出来。</p><ul><li><p>lambda 内部可以使用静态、非静态和局部变量，这称为 lambda 内的变量捕获。</p></li><li><p>lambda 方法在编译器内部被翻译成私有方法，并派发 <code>invokedynamic</code> 字节码指令来进行调用。可以使用JDK 中的 <code>javap</code> 工具来反编译 class 文件。使用 <code>javap -p</code> 或 <code>javap -c -v</code> 命令来看一看 lambda 表达式生成的字节码。大致应该长这样：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> lambda$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>lambda表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在 lambda 内部修改定义在域外的变量。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primes <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> factor <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\nprimes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    factor<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面这段代码会编译报错：Variable used in lambda expression should be final or effectively final；</p><p>另外，只是访问它而不作修改是可以的，如下所示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primes <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> factor <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\nprimes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factor <span class="token operator">*</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li></li></ul><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h2><p>Stream（流）是一个来自数据源的元素队列，它可以支持聚合操作。</p><ul><li>数据源：流的数据来源，构造 Stream 对象的数据源，比如通过一个 List 来构造 Stream 对象，这个 List 就是数据源；</li><li>聚合操作：对 Stream 对象进行处理后使得 Stream 对象返回指定规则数据的操作称之为聚合操作，比如filter、map、limit、sorted等都是聚合操作。</li></ul><h3 id="parallelstream" tabindex="-1"><a class="header-anchor" href="#parallelstream" aria-hidden="true">#</a> parallelStream</h3><p>每个 Stream 都有两种模式：顺序执行和并行执行。</p><ul><li>顺序流：<code>List &lt;Person&gt; people = list.getStream.collect(Collectors.toList());</code></li><li>并行流：<code>List &lt;Person&gt; people = list.getStream.parallel().collect(Collectors.toList());</code></li></ul><p>顾名思义，当使用顺序方式去遍历时，每个item读完后再读下一个item。而使用并行去遍历时，数组会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。</p><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><ul><li>中间操作：filter、map、mapToInt、mapToLong、mapToDouble、flatMap、sorted、distinct、limit、skip、of、iterate</li><li>终止操作：forEach、count、collect、reduce、toArray、anyMatch、allMatch、noneMatch、findAny、findFirst、max、min</li><li>原始类型特化流：IntStream、LongStream、DoubleStream</li></ul><p>看下所有API：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/java1.8/image-20211101172003759.png" alt="image-20211101172003759"></p><h4 id="过滤-filter" tabindex="-1"><a class="header-anchor" href="#过滤-filter" aria-hidden="true">#</a> 过滤 Filter</h4><p>Filter通过 <code>predicate</code> 判断函数来过滤所有的元素。这个操作是中间操作，需要通过终止操作才会触发执行。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Haskell&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// C++</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="映射-map" tabindex="-1"><a class="header-anchor" href="#映射-map" aria-hidden="true">#</a> 映射 Map</h4><p><code>map</code> 是一种中间过程操作，借助函数表达式将元素转换成另一种形式。下面的例子将每个字符串转换成大写的字符串。但你也可以使用 <code>map</code> 将每个对象转换为另一种类型。最终输出的结果类型依赖于你传入的函数表达式。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Haskell&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//由大到小</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;SCALA&quot;,&quot;LISP&quot;,&quot;JAVA&quot;,&quot;HASKELL&quot;,&quot;C++&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="映射-flatmap" tabindex="-1"><a class="header-anchor" href="#映射-flatmap" aria-hidden="true">#</a> 映射 flatMap</h4><p>如果涉及到一对多映射，需要将映射结果放入 Stream 中。使用 flatMap 方法的效果是，转换后的多个结果并不是分别映射成一个流，而是映射成流的内容。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>word <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="排序-sorted" tabindex="-1"><a class="header-anchor" href="#排序-sorted" aria-hidden="true">#</a> 排序 Sorted</h4><p>Sorted 是一个中间态操作，它返回流的有序视图。 除非你传递自定义的 <code>Comparator</code>，否则元素按默认的 <strong>由小到大</strong> 排序。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Haskell&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//默认排序</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>特别注意：<code>sorted</code> 只是创建流的排序视图，并没有改变原始集合的顺序。所以说原集合 list 的顺序并没有改变。</p><h4 id="归约-reduce" tabindex="-1"><a class="header-anchor" href="#归约-reduce" aria-hidden="true">#</a> 归约 Reduce</h4><p>终止型操作，通过给定的函数表达式来处理流中的前后两个元素，或者中间结果与下一个元素。Lambda 反复结合每一个元素，直到流被归约成一个值。例如求和或查找最大元素。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 将流数据列表拆分多批，sum初始为0，每批都执行 (sum, p) -&gt; sum = sum + p.age，得到局部的sum总和。并行计算</span>\n    <span class="token comment">// 最后通过 (sum1, sum2) -&gt; sum1 + sum2 ，计算最终的总和</span>\n    <span class="token comment">// (sum1, sum2) -&gt; sum1 + sum2，主要适用于并行，parallelStream（），单线程是无效的。</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Integer</span> ageSum <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> sum <span class="token operator">+=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token punctuation">(</span>sum1<span class="token punctuation">,</span> sum2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> sum1 <span class="token operator">+</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ageSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n        <span class="token comment">// 省略get、set、构造   </span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct" aria-hidden="true">#</a> distinct</h3><p>去重</p><h4 id="计数-count" tabindex="-1"><a class="header-anchor" href="#计数-count" aria-hidden="true">#</a> 计数 Count</h4><p>Count 是一个终止型操作，返回一个 long 类型的元素列表总数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> countNum <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;J&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>countNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="匹配-match" tabindex="-1"><a class="header-anchor" href="#匹配-match" aria-hidden="true">#</a> 匹配 Match</h4><p>各种匹配操作用于判断是否满足 stream 条件。所有的操作都完成后，返回一个 boolean 类型结果。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 只需要一个条件满足</span>\n<span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;anyMatch：&quot;</span> <span class="token operator">+</span> anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n\n<span class="token comment">// 所有条件都要满足</span>\n<span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;allMatch：&quot;</span> <span class="token operator">+</span> allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n\n<span class="token comment">// 所有的条件都要不满足</span>\n<span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;noneMatch：&quot;</span> <span class="token operator">+</span> noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n\n<span class="token comment">// 返回任意一个元素</span>\n<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> anyE <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;findAny：&quot;</span> <span class="token operator">+</span> anyE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//返回第一个元素</span>\n<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> firstE <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;findFirst：&quot;</span> <span class="token operator">+</span> firstE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="跳过-skip" tabindex="-1"><a class="header-anchor" href="#跳过-skip" aria-hidden="true">#</a> 跳过 skip</h4><p>返回一个扔掉前 n 个元素的流。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Haskell&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//扔掉前三个元素</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="输出-limit" tabindex="-1"><a class="header-anchor" href="#输出-limit" aria-hidden="true">#</a> 输出 limit</h4><p>只取前 n 个结果。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scala&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Haskell&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lisp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//取前三个元素</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="输出-collect" tabindex="-1"><a class="header-anchor" href="#输出-collect" aria-hidden="true">#</a> 输出 collect</h4><p>接受各种做法作为参数，将流中的元素累积成一个汇总结果</p><p>常见例子：</p><ul><li>对一个交易列表按货币分组，获得该货币的所有交易额总和（返回一个<code>Map&lt;Currency，Integer&gt;</code>）</li><li>将交易列表分成两组，贵的和不贵的（返回一个<code>Map&lt;Boolean，List&lt;Transaction&gt;&gt;</code>）</li><li>创建多级分组，比如按城市对交易分组，然后进一步按照贵的或不贵分组</li></ul><p>Collectors常见方法：</p><ul><li>Collectors.toList，得到List列表</li><li>Collectors.toSet，得到Set集合</li><li>Collectors.joining ，通过<code>连接符</code>拼接字符串</li><li>Collectors.groupingBy(Function&lt;? super T,? extends K&gt;) ，按K值分组，返回Map&lt;K，List&gt;</li><li>Collectors.groupingBy(Function&lt;? super T,? extends K&gt;, Collector&lt;? super T,A,D&gt;)，二级分组，得到两级Map</li><li>Collectors.partitioningBy(Predicate&lt;? super T&gt; predicate) ，分区是分组的特殊情况，返回一个布尔值，意味着得到的分组Map的key只能是Boolean，于是它最多可以分为两组</li><li>Collectors.maxBy，求最大值，需要传一个自定义的Comparator</li><li>Collectors.reducing，广义的归约汇总。</li><li>Collectors.toMap ，得到Map集合。注意：如果key重复会抛异常，要特殊处理</li></ul><h2 id="常用例子" tabindex="-1"><a class="header-anchor" href="#常用例子" aria-hidden="true">#</a> 常用例子</h2><h3 id="匿名类简写" tabindex="-1"><a class="header-anchor" href="#匿名类简写" aria-hidden="true">#</a> 匿名类简写</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;In Java8, Lambda expression rocks !!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用法</span>\n<span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> expression\n<span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> statement\n<span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span> features <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Lambdas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Default Method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Stream API&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Date and Time API&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// forEach</span>\nfeatures<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span>\nfeatures<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用" aria-hidden="true">#</a> 方法引用</h3><p><em>构造引用</em></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Supplier&lt;Student&gt; s = () -&gt; new Student();</span>\n<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><em>对象::实例方法</em>，Lambda表达式的(形参列表)与实例方法的(实参列表)类型个数是对应</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// set.forEach(t -&gt; System.out.println(t));</span>\nset<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><em>类名::静态方法</em></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Stream&lt;Double&gt; stream = Stream.generate(() -&gt; Math.random());</span>\n<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><em>类名::实例方法</em></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;((s1,s2) -&gt; s1.compareTo(s2));</span>\n<span class="token comment">/*  这里如果使用第一句话，编译器会有提示: Can be replaced with Comparator.naturalOrder，这句话告诉我们\n  String已经重写了compareTo()方法，在这里写是多此一举，这里为什么这么写，是因为为了体现下面\n  这句编译器的提示: Lambda can be replaced with method reference。好了，下面的这句就是改写成方法引用之后: \n*/</span>\n<span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="collectors" tabindex="-1"><a class="header-anchor" href="#collectors" aria-hidden="true">#</a> Collectors</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将字符串换成大写并用逗号链接起来</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> G7 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;USA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Italy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;U.K.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Canada&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> <span class="token class-name">G7Countries</span> <span class="token operator">=</span> G7<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">G7Countries</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Collectors.joining(&quot;, &quot;)</li><li>Collectors.toList()</li><li>Collectors.toSet() ，生成set集合</li><li>Collectors.toMap(MemberModel::getUid, Function.identity())</li><li>Collectors.toMap(ImageModel::getAid, o -&gt; IMAGE_ADDRESS_PREFIX + o.getUrl())</li></ul><h2 id="functionalinterface" tabindex="-1"><a class="header-anchor" href="#functionalinterface" aria-hidden="true">#</a> FunctionalInterface</h2><h3 id="理解注解-functioninterface" tabindex="-1"><a class="header-anchor" href="#理解注解-functioninterface" aria-hidden="true">#</a> 理解注解 @FunctionInterface</h3><ul><li><p>interface 做注解的注解类型，被定义成java语言规范</p></li><li><p>一个被它注解的接口只能有一个抽象方法，有两种例外</p><ul><li>第一是接口允许有实现的方法，这种实现的方法是用 <code>default</code> 关键字来标记的（java反射中<code>java.lang.reflect.Method#isDefault()</code> 方法用来判断是否是 default 方法）</li><li>第二如果声明的方法和 <code>java.lang.Object</code> 中的某个方法一样，它可以不当做未实现的方法，不违背这个原则：一个被它注解的接口只能有一个抽象方法, 比如: <code>java public interface Comparator&lt;T&gt; { int compare(T o1, T o2); boolean equals(Object obj); }</code></li></ul></li><li><p>如果一个类型被这个注解修饰，那么编译器会要求这个类型必须满足如下条件：</p><ul><li>这个类型必须是一个 <code>interface</code>，而不是其他的注解类型、枚举 <code>enum</code> 或者类 <code>class</code></li><li>这个类型必须满足 function interface 的所有要求，如你个包含两个抽象方法的接口增加这个注解，会有编译错误。</li></ul></li><li><p>编译器会自动把满足 function interface 要求的接口自动识别为 function interface</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',86),e={href:"https://github.com/aalansehaiyang/java8-tutorial",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("https://github.com/aalansehaiyang/java8-tutorial"),c={},l=(0,a(3744).Z)(c,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);