"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[3191],{138:(e,i,r)=>{r.r(i),r.d(i,{data:()=>d});const d={key:"v-2d91434a",path:"/database/nosql-redis/redis-introduce.html",title:"Redis入门 - 概念和基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"介绍",slug:"介绍",children:[{level:3,title:"资料",slug:"资料",children:[]}]},{level:2,title:"为什么要使用Redis？",slug:"为什么要使用redis",children:[]},{level:2,title:"Redis的使用场景",slug:"redis的使用场景",children:[{level:3,title:"热点数据的缓存",slug:"热点数据的缓存",children:[]},{level:3,title:"限时业务的运用",slug:"限时业务的运用",children:[]}]}],filePathRelative:"database/nosql-redis/redis-introduce.md",git:{updatedTime:1636018925e3,contributors:[{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:1}]}}},9192:(e,i,r)=>{r.r(i),r.d(i,{default:()=>b});var d=r(6252);const s=(0,d.uE)('<h1 id="redis入门-概念和基础" tabindex="-1"><a class="header-anchor" href="#redis入门-概念和基础" aria-hidden="true">#</a> Redis入门 - 概念和基础</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Redis 是一款内存高速缓存数据库。Redis 全称为：<strong>Remote Dictionary Server</strong>（远程数据服务），使用 C 语言编写，Redi s是一个 <code>key-value</code> 存储系统（键值存储系统）。</p><p>Redis 是一种支持 key-value 等多种数据结构的存储系统。支持丰富的数据类型，如：String、list、set、zset、hash。。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p><h3 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h3>',5),t=(0,d.Uk)("Redis 官网："),l={href:"http://redis.io",target:"_blank",rel:"noopener noreferrer"},a=(0,d.Uk)("http://redis.io"),n=(0,d.Uk)("Redis 官方文档："),h={href:"http://redis.io/documentation",target:"_blank",rel:"noopener noreferrer"},o=(0,d.Uk)("http://redis.io/documentation"),c=(0,d.Uk)("Redis 教程："),p={href:"http://www.w3cschool.cn/redis/redis-intro.html",target:"_blank",rel:"noopener noreferrer"},u=(0,d.Uk)("http://www.w3cschool.cn/redis/redis-intro.html"),R=(0,d.Uk)("Redis 下载："),g={href:"http://redis.io/download",target:"_blank",rel:"noopener noreferrer"},f=(0,d.Uk)("http://redis.io/download"),m=(0,d.uE)('<h2 id="为什么要使用redis" tabindex="-1"><a class="header-anchor" href="#为什么要使用redis" aria-hidden="true">#</a> 为什么要使用Redis？</h2><ul><li><p><strong>读写性能优异</strong>：Redis 能读的速度是 110000 次/s，写的速度是 81000 次/s；</p></li><li><p><strong>丰富的数据类型</strong>：Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作；</p></li><li><p><strong>原子性</strong>：Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行；</p></li><li><p><strong>丰富的特性</strong>：Redis支持支持发布/订阅模式，通知，key 过期等特性；</p></li><li><p><strong>持久化</strong>：Redis 支持 RDB, AOF 等持久化方式</p></li></ul><h2 id="redis的使用场景" tabindex="-1"><a class="header-anchor" href="#redis的使用场景" aria-hidden="true">#</a> Redis的使用场景</h2><h3 id="热点数据的缓存" tabindex="-1"><a class="header-anchor" href="#热点数据的缓存" aria-hidden="true">#</a> 热点数据的缓存</h3><p>缓存是 Redis 最常见的应用场景，之所有这么使用，主要是因为 Redis 读写性能优异。而且逐渐有取代memcached，成为首选服务端缓存的组件。而且，Redis 内部是支持事务的，在使用时候能有效保证数据的一致性。</p><p>作为缓存使用时，一般有两种方式保存数据：</p><ul><li>读取前，先去读 Redis，如果没有数据，读取数据库，将数据拉入 Redis。</li><li>插入数据时，同时写入 Redis。</li></ul><p>方案一：实施起来简单，但是有两个需要注意的地方：</p><ul><li>避免缓存击穿（数据库没有请求的目标数据，导致 Redis 一直没有数据，而一直命中数据库）</li><li>数据的实时性相对会差一点</li></ul><p>方案二：数据实时性强，但是开发时不便于统一处理。</p><p>当然，两种方式根据实际情况来适用。如：方案一适用于对于数据实时性要求不是特别高的场景。方案二适用于字典表、数据量不大的数据存储。</p><h3 id="限时业务的运用" tabindex="-1"><a class="header-anchor" href="#限时业务的运用" aria-hidden="true">#</a> 限时业务的运用</h3><p>Redis 中可以使用 <em>expire</em> 命令设置一个键的生存时间，到时间后 Redis 会删除它。利用这一特性可以运用在限时的优惠活动信息、手机验证码等业务场景。</p>',13),k={},b=(0,r(3744).Z)(k,[["render",function(e,i){const r=(0,d.up)("OutboundLink");return(0,d.wg)(),(0,d.iD)(d.HY,null,[s,(0,d._)("ul",null,[(0,d._)("li",null,[t,(0,d._)("a",l,[a,(0,d.Wm)(r)])]),(0,d._)("li",null,[n,(0,d._)("a",h,[o,(0,d.Wm)(r)])]),(0,d._)("li",null,[c,(0,d._)("a",p,[u,(0,d.Wm)(r)])]),(0,d._)("li",null,[R,(0,d._)("a",g,[f,(0,d.Wm)(r)])])]),m],64)}]])},3744:(e,i)=>{i.Z=(e,i)=>{for(const[r,d]of i)e[r]=d;return e}}}]);