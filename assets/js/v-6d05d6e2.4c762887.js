"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[5117],{3642:(t,e,d)=>{d.r(e),d.d(e,{data:()=>r});const r={key:"v-6d05d6e2",path:"/database/nosql-redis/redis-data-types.html",title:"Redis入门 - 数据类型：5种基础数据类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Redis数据结构简介",slug:"redis数据结构简介",children:[{level:3,title:"String字符串",slug:"string字符串",children:[]},{level:3,title:"List列表",slug:"list列表",children:[]},{level:3,title:"Set集合",slug:"set集合",children:[]},{level:3,title:"Hash散列",slug:"hash散列",children:[]},{level:3,title:"Zset有序集合",slug:"zset有序集合",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"database/nosql-redis/redis-data-types.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2}]}}},3477:(t,e,d)=>{d.r(e),d.d(e,{default:()=>k});var r=d(6252);const s=(0,r.uE)('<h1 id="redis入门-数据类型-5种基础数据类型" tabindex="-1"><a class="header-anchor" href="#redis入门-数据类型-5种基础数据类型" aria-hidden="true">#</a> Redis入门 - 数据类型：5种基础数据类型</h1><h2 id="redis数据结构简介" tabindex="-1"><a class="header-anchor" href="#redis数据结构简介" aria-hidden="true">#</a> Redis数据结构简介</h2><p>在 Redis 中所有的 <code>key</code>（键）都是字符串。我们在谈基础数据结构时，讨论的是存储 <code>value</code>（值）的数据类型，主要包括常见的 5 种数据类型，分别是：String、List、Set、Zset、Hash。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-redis/db-redis-ds-1.jpeg" alt="img"></p><table><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td><strong>String</strong> 字符串</td><td>字符串、整数或浮点数</td><td>对整个字符串或字符串的一部分进行操作；对整数或浮点数进行自增或自减操作</td></tr><tr><td><strong>List</strong> 列表</td><td>一个链表，链表上的每个节点都包含一个字符串</td><td>对链表的两端进行 <code>push</code> 和 <code>pop</code> 操作，读取单个或多个元素；根据值查找或删除元素</td></tr><tr><td><strong>Set</strong> 集合</td><td>包含字符串的无序集合</td><td>字符串的集合，包含基础的方法有看是否存在添加、获取、删除；还包含计算交集、并集、差集等</td></tr><tr><td><strong>Hash</strong> 散列</td><td>包含键值对的无序散列表</td><td>包含方法有添加、获取、删除单个元素</td></tr><tr><td><strong>Zset</strong> 有序集合</td><td>和散列一样，用于存储键值对</td><td>字符串成员与浮点数分数之间的有序映射；元素的排列顺序由分数的大小决定；包含方法有添加、获取、删除单个元素以及根据分值范围或成员来获取元素</td></tr></tbody></table><h3 id="string字符串" tabindex="-1"><a class="header-anchor" href="#string字符串" aria-hidden="true">#</a> String字符串</h3><blockquote><p>String 是 redis 中最基本的数据类型，一个 key 对应一个 value。</p></blockquote><p>String 类型是二进制安全的，意思是 redis 的 String 可以包含任何数据。如数字，字符串，jpg图片或者序列化的对象。</p><ul><li>下图是一个 String 类型的实例，其中键为 hello，值为 world：</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-redis/redis-datatype-string.png" alt=""></p><ul><li><strong>命令使用</strong></li></ul><table><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>get</td><td>获取存储在给定键中的值</td><td>get name</td></tr><tr><td>set</td><td>设置存储在给定键中的值</td><td>set name value</td></tr><tr><td>del</td><td>删除存储在给定键中的值</td><td>del name</td></tr><tr><td>incr</td><td>将键存储的值加1</td><td>incr key</td></tr><tr><td>decr</td><td>将键存储的值减1</td><td>decr key</td></tr><tr><td>incrby</td><td>将键存储的值加上整数</td><td>incrby key amount</td></tr><tr><td>decrby</td><td>将键存储的值减去整数</td><td>decrby key amount</td></tr></tbody></table><ul><li><strong>适用场景</strong>：缓存、计数器、共享 Session <ul><li><strong>缓存</strong>： 经典使用场景，把常用信息，字符串，图片或者视频等信息放到 redis 中，redis 作为缓存层，mysql 做持久化层，降低 mysql 的读写压力。</li><li><strong>计数器</strong>：redis 是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。</li><li><strong>session</strong>：常见方案 spring session + redis 实现 session 共享。</li></ul></li></ul><h3 id="list列表" tabindex="-1"><a class="header-anchor" href="#list列表" aria-hidden="true">#</a> List列表</h3><blockquote><p>Redis 中的 List 其实就是链表（Redis用双端链表实现List）。</p></blockquote><p>使用 List 结构，我们可以轻松地实现最新消息排队功能（比如新浪微博的 TimeLine）。List 的另一个应用就是消息队列，可以利用 List 的 <code>PUSH</code> 操作，将任务存放在 List 中，然后工作线程再用 <code>POP</code> 操作将任务取出进行执行。</p><ul><li>图例</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-redis/redis-datatype-list.png" alt="list"></p><ul><li><strong>命令使用</strong></li></ul><table><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>rpush</td><td>将给定值推入到列表<em>右端</em></td><td>RPUSH key value</td></tr><tr><td>lpush</td><td>将给定值推入到列表<em>左端</em></td><td>LPUSH key value</td></tr><tr><td>rpop</td><td>从列表的右端弹出一个值，并返回被弹出的值</td><td>RPOP key</td></tr><tr><td>lpop</td><td>从列表的左端弹出一个值，并返回被弹出的值</td><td>LPOP key</td></tr><tr><td>lrange</td><td>获取列表在给定的索引范围内的值</td><td>lrange key 0 -1<br>结束索引为 -1 时查询所有</td></tr><tr><td>lindex</td><td>通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</td><td>LINEX key index</td></tr></tbody></table>',20),i=(0,r.Uk)("更多命令请参考："),l={href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"},a=(0,r.Uk)("Redis 命令中心"),n=(0,r.uE)('<ul><li><strong>适用场景</strong>：用于存储列表型数据。如：粉丝列表、商品列表等 <ul><li><strong>微博 TimeLine</strong>: 有人发布微博，用 <code>lpush</code> 加入时间轴，展示新的列表信息。</li><li><strong>消息队列</strong></li></ul></li></ul><h3 id="set集合" tabindex="-1"><a class="header-anchor" href="#set集合" aria-hidden="true">#</a> Set集合</h3><p>Redis 的 <em>Set</em> 是 String 类型的<strong>无序</strong>集合。<strong>集合成员是唯一的</strong>，这就意味着集合中不能出现重复的数据。</p><p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><ul><li><strong>图例</strong></li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-redis/redis-datatype-set.png" alt="set"></p><ul><li><strong>命令使用</strong></li></ul><table><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>sadd</td><td>向集合添加一个或多个成员</td><td>SADD key value</td></tr><tr><td>scard</td><td>获取集合的成员数</td><td>SCARD key</td></tr><tr><td>smembers</td><td>返回集合中的所有成员</td><td>smembers key member</td></tr><tr><td>sismember</td><td>判断 member 元素是否是集合 key 的成员</td><td>SISMEMBER key member</td></tr></tbody></table>',8),o=(0,r.Uk)("更多操作命令："),h={href:"https://www.runoob.com/redis/redis-sets.html",target:"_blank",rel:"noopener noreferrer"},g=(0,r.Uk)("Redis Set 集合 - 菜鸟教程"),u=(0,r.uE)('<ul><li><strong>适用场景</strong>：用于存储去重的列表型数据 <ul><li><strong>标签</strong>（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li><li><strong>点赞，或点踩，收藏等</strong>，可以放到 set 中实现</li></ul></li></ul><h3 id="hash散列" tabindex="-1"><a class="header-anchor" href="#hash散列" aria-hidden="true">#</a> Hash散列</h3><p>Redis hash 是一个 <em>String</em> 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储结构化数据，如一个对象：用户信息、产品信息等。</p><ul><li>图例</li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-redis/redis-datatype-hash.png" alt="hash"></p><ul><li><strong>命令使用</strong></li></ul><table><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>hset</td><td>添加键值对</td><td>hset hash-key sub-key1 value1</td></tr><tr><td>hget</td><td>获取指定散列键的值</td><td>hget hash-key key1</td></tr><tr><td>hgetall</td><td>获取散列中包含的所有键值对</td><td>hgetall hash-key</td></tr><tr><td>hdel</td><td>如果给定键存在于散列中，那么就移除这个键</td><td>hdel hash-key sub-key1</td></tr></tbody></table><ul><li><strong>适用场景</strong>：存储结构化数据 <ul><li><strong>缓存</strong>： 能直观，相比 String 更节省空间的维护缓存信息，如用户信息，视频信息等。</li></ul></li></ul><h3 id="zset有序集合" tabindex="-1"><a class="header-anchor" href="#zset有序集合" aria-hidden="true">#</a> Zset有序集合</h3><p>Redis 有序集合 Zset 和集合 Set 一样也是 String 类型元素的集合，且<strong>不允许重复</strong>的成员。不同的是每个元素都会关联一个 double 类型的分数。Redis 正是通过分数来为集合中的成员进行<em>从小到大</em>的排序。</p><p>有序集合的成员是唯一的，但分数(score)却可以重复。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><ul><li><strong>图例</strong></li></ul><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/database/nosql-redis/redis-datatype-zset.png" alt="zset"></p><ul><li><strong>命令使用</strong></li></ul><table><thead><tr><th>命令</th><th>简述</th><th>语法</th><th>使用</th></tr></thead><tbody><tr><td>zadd</td><td>将一个带有给定分值的成员添加到哦有序集合里面</td><td>ZADD key score member [[score member] [score member] …]<br><code>score</code> 值可以是整数值或双精度浮点数</td><td>zadd zset-key 178 member1</td></tr><tr><td>zrange</td><td>根据元素在有序集合中所处的位置，从有序集合中获取多个元素</td><td>ZRANGE key start stop [WITHSCORES]<br>start和stop是下标索引，从0开始；-1是最后一个元素，-2是倒数第二个</td><td>zrange zset-key 0 -1 withscores</td></tr><tr><td>zrem</td><td>如果给定元素成员存在于有序集合中，那么就移除这个元素</td><td>ZREM key member [member …]</td><td>zrem zset-key member1</td></tr></tbody></table><ul><li><strong>适用场景</strong>：适合用于存储各种排行数据 <ul><li><strong>排行榜</strong>：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li></ul></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',17),c=(0,r.Uk)("Redis 官网："),m={href:"https://redis.io/topics/data-types",target:"_blank",rel:"noopener noreferrer"},p=(0,r.Uk)("https://redis.io/topics/data-types"),b=(0,r._)("li",null,"https://www.pdai.tech/md/db/nosql-redis/db-redis-data-types.html",-1),y={},k=(0,d(3744).Z)(y,[["render",function(t,e){const d=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.iD)(r.HY,null,[s,(0,r._)("blockquote",null,[(0,r._)("p",null,[i,(0,r._)("a",l,[a,(0,r.Wm)(d)])])]),n,(0,r._)("blockquote",null,[(0,r._)("p",null,[o,(0,r._)("a",h,[g,(0,r.Wm)(d)])])]),u,(0,r._)("ul",null,[(0,r._)("li",null,[c,(0,r._)("a",m,[p,(0,r.Wm)(d)])]),b])],64)}]])},3744:(t,e)=>{e.Z=(t,e)=>{for(const[d,r]of e)t[d]=r;return t}}}]);