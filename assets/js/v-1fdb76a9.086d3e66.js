"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[7341],{6357:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1fdb76a9",path:"/java/concurrent/java-concurrent-keywords-volatile.html",title:"关键字: volatile",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"面试题",slug:"面试题",children:[]},{level:2,title:"volatile 的作用详解",slug:"volatile-的作用详解",children:[{level:3,title:"防重排序",slug:"防重排序",children:[]},{level:3,title:"实现可见性",slug:"实现可见性",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"java/concurrent/java-concurrent-keywords-volatile.md",git:{updatedTime:1701927383e3,contributors:[{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:2},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:1}]}}},9093:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="关键字-volatile" tabindex="-1"><a class="header-anchor" href="#关键字-volatile" aria-hidden="true">#</a> 关键字: volatile</h1><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><ul><li>volatile 关键字的作用是什么?</li><li>volatile 能保证原子性吗?</li><li>之前 32 位机器上共享的 long 和 double 变量的为什么要用 volatile? 现在 64 位机器上是否也要设置呢?</li><li><code>i++</code> 为什么不能保证原子性?</li><li>volatile 是如何实现可见性的? 内存屏障。</li><li>volatile 是如何实现有序性的? <code>happens-before</code> 等</li><li>说下 volatile 的应用场景?</li></ul><h2 id="volatile-的作用详解" tabindex="-1"><a class="header-anchor" href="#volatile-的作用详解" aria-hidden="true">#</a> volatile 的作用详解</h2><h3 id="防重排序" tabindex="-1"><a class="header-anchor" href="#防重排序" aria-hidden="true">#</a> 防重排序</h3><p>我们可以从下面这个单例的例子来分析重排序问题。</p><p>在并发环境下单例模式的实现方式，我们通常可以采用双重检查加锁（DCL）的方式实现：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/** 构造函数私有，禁止外部实例化 */</span>\n    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>思考下，为什么第 2 行代码中要在成员变量 singleton 加上 <code>volatile</code> 关键字？要理解这个问题，想要了解对象的构造过程，实例化一个对象其实可以分为三个步骤：</p><ol><li><p>分配内存空间</p></li><li><p>初始化对象</p></li><li><p>将内存空间地址赋值给对应的引用</p></li></ol><p>但是，由于操作系统可能会<strong>对指令进行重排序</strong>，所以上面的过程也可能会变成：</p><ol><li><p>分配内存空间</p></li><li><p>将内存空间地址赋值给对应的引用</p></li><li><p>初始化对象</p></li></ol><p>那么，重排序后多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为 <code>volatile</code> 类型的变量。</p><h3 id="实现可见性" tabindex="-1"><a class="header-anchor" href="#实现可见性" aria-hidden="true">#</a> 实现可见性</h3><p>可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。</p><p>引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——<strong>线程工作内存</strong>。<code>volatile</code> 关键字能有效的解决这个问题，我们看下下面的例子，就可以知道其作用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n        b <span class="token operator">=</span> a<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b=&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;;a=&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">final</span> <span class="token class-name">VolatileTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    test<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    test<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>直观上说，这段代码的结果只可能有两种：<em>b=3;a=3</em> 或 <em>b=2;a=1</em>。不过运行上面的代码（可能时间上要长一点），你会发现除了上两种结果之外，还出现了其他结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>...... \nb=2;a=1\nb=2;a=1\nb=3;a=3\nb=3;a=3\nb=3;a=1 //第三种结果\n...... \nb=3;a=3\nb=2;a=1\nb=2;a=3 //第四种结果\nb=3;a=3\n......\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>为什么会出现这种结果呢？正常情况下，如果先执行 <code>change()</code> 方法，再执行 <code>print()</code> 方法，输出结果应该为 <em>b=3;a=3</em>。相反，如果先执行的 <code>print()</code> 方法，再执行 <code>change()</code> 方法，结果应该是 <em>b=2;a=1</em>。那 <em>b=3;a=1</em>和 <em>b=2;a=3</em> 的结果是怎么出来的？原因就是第一个线程将值 <code>a=3</code> 修改后，但是对第二个线程是<u>不可见</u>的，所以才出现这一结果。如果将 a 和 b 都改成 <code>volatile</code> 类型的变量再执行，则再也不会出现这种情况了。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li></li></ul>',22),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);