"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[9022],{9145:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-bb42b324",path:"/software/postman.html",title:"Postman",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"环境变量",slug:"环境变量",children:[]},{level:2,title:"预请求脚本",slug:"预请求脚本",children:[{level:3,title:"Get",slug:"get",children:[]},{level:3,title:"Post",slug:"post",children:[]}]},{level:2,title:"测试脚本",slug:"测试脚本",children:[{level:3,title:"断言",slug:"断言",children:[]}]}],filePathRelative:"software/postman.md",git:{updatedTime:1719836412e3,contributors:[{name:"TianCi.Xiong",email:"support@xiongtianci.com",commits:3},{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:2}]}}},5307:(n,s,a)=>{a.r(s),a.d(s,{default:()=>H});var t=a(6252),p=a(3577);const e=(0,t._)("h1",{id:"postman",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#postman","aria-hidden":"true"},"#"),(0,t.Uk)(" Postman")],-1),o=(0,t.Uk)("官方文档："),c={href:"https://learning.postman.com/docs/getting-started/introduction/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("Postman"),u=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>以下文档基于 Postman_v9.0.5_win_x64 整理</p></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>在一个项目的生命周期中，可能会有开发环境、测试环境、预上线环境、线上环境等众多的不同环境，这时候就可以通过环境变量来管理接口的<strong>地址</strong>以及<strong>端口</strong>。</p><p>点击左侧 <code>Environments</code>，系统中默认已经存在了一个 <code>Globals</code> 的全局环境，可以在其中存放一些通用的公共变量。先在这里写入 <code>host</code> 和 <code>port</code> 信息：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011084255809.png" alt="image-20211011084255809"></p>',5),i=(0,t.Uk)("在需要使用变量时，可以在访问接口时使用双大括号引用变量，以 "),r=(0,t.Uk)(" 的方式进行引用："),k=(0,t.uE)('<p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011085001157.png" alt="image-20211011085001157"></p><p>以上是使用全局环境变量，此外我们也可以创建新的环境来存放变量。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011085706552.png" alt="image-20211011085706552"></p><p>这里创建了 本地环境、测试环境、生产环境 共三个环境，这样我们可以直接在多个环境间进行切换。测试接口的过程中，就不需要频繁的改动接口的地址了。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011085849973.png" alt="image-20211011085849973"></p><hr><p>我们将环境变量分为了两类，<strong>普通环境变量</strong>和全局变量。总的来说，全局变量具有更高的使用范围，即使切换到自己创建的环境，全局变量仍然可用。但是我们自己创建的环境之间是相互隔离的，如果切换到一个环境，那么其他环境中的变量将不再可用。</p><h2 id="预请求脚本" tabindex="-1"><a class="header-anchor" href="#预请求脚本" aria-hidden="true">#</a> 预请求脚本</h2>',8),d=(0,t.Uk)("文档："),m={href:"https://go.pstmn.io/docs-prerequest-scripts/",target:"_blank",rel:"noopener noreferrer"},g=(0,t.Uk)("Pre-request Script"),b=(0,t.uE)('<p><code>Pre-request Script</code> 预请求脚本，是在<strong>请求发送前</strong>被执行的代码逻辑，可以在这里执行一些 <code>JavaScript</code> 代码。</p><p>这里后端准备一个接口，接受一个 String 类型的参数，返回拼接好的字符串</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getTitle&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str = &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 Params 选项卡中添加参数，key 为 str，value 采用大括号引用变量，变量名自定义。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011092412037.png" alt="image-20211011092412037"></p><p>在 Pre-request Script 选项卡中编写脚本，设置 str 参数的值，在请求中传给后端：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span>collectionVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;str_value&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011092549537.png" alt="image-20211011092549537"></p>',8),v=(0,t.Uk)("关于脚本中 "),h=(0,t._)("code",null,"pm.*",-1),q=(0,t.Uk)(" 使用的详细信息，请查看 "),f={href:"https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/",target:"_blank",rel:"noopener noreferrer"},j=(0,t.Uk)("Postman JavaScript reference"),_=(0,t._)("hr",null,null,-1),x=(0,t._)("p",null,[(0,t.Uk)("Pre-request Script 还可以在请求当前接口前，通过执行脚本来"),(0,t._)("strong",null,"先请求一下其他接口"),(0,t.Uk)("。")],-1),y=(0,t._)("h3",{id:"get",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#get","aria-hidden":"true"},"#"),(0,t.Uk)(" Get")],-1),w=(0,t.Uk)("通过内置函数 "),P={href:"https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Uk)("pm.sendRequest"),U=(0,t.Uk)(" 可以发送方法请求。"),S=(0,t.uE)('<p>这里编写一个脚本，在执行目标请求 <code>/getTitle</code> 之前需先执行 <code>/before</code> 请求，并将返回信息打印到控制台：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:8099/hello/before&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;接口返回：&quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Console 控制台中的打印顺序可以看到，是在先执行了 <code>Pre-request</code> 中的请求后，才去执行的真正目标接口的请求。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011101013521.png" alt="image-20211011101013521"></p><h3 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> Post</h3><p>从上面可以看到调用 <code>sendRequest</code> 时，默认发送的 <code>get</code> 请求，如果需要使用 <code>post</code> 请求、配置其他请求参数等可以下面方式。</p><p>这里模拟一个场景，访问正式接口前需访问登录接口 <code>/login</code> 拿到 token，用于身份认证。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loginRequest <span class="token operator">=</span> <span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;localhost:8099/login&#39;</span><span class="token punctuation">,</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n    body<span class="token operator">:</span> <span class="token punctuation">{</span>\n        mode<span class="token operator">:</span> <span class="token string">&#39;urlencoded&#39;</span><span class="token punctuation">,</span>\n        urlencoded<span class="token operator">:</span> <span class="token string">&#39;username=jack&amp;password=1234&#39;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\npm<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>loginRequest<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pm<span class="token punctuation">.</span>collectionVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN&quot;</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>定义一个变量 loginRequest，在其中使用 <code>url</code> 指定请求地址， <code>method</code> 指定请求方法， <code>body</code> 携带参数，最后使用 <code>sendRequest</code> 进行请求的发送。</p><p>在获取完成 token 后，通过下面的代码将获取的 token 放入了 Collection 的变量中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span>collectionVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN&quot;</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看 Collection 中的变量，已经保存了刚才获取的 token：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011111940912.png" alt="image-20211011111940912"></p><p>在需要认证的请求头 <code>Headers</code> 中，引用这个 token，就可以正常的调用接口了：</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011112700886.png" alt="image-20211011112700886"></p><hr><p>在上面的例子中，我们使用的是 <code>urlencoded</code> 格式的传参方式，如果接口定义是使用 JSON方式传参，可以写成下面的格式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loginRequest <span class="token operator">=</span> <span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n    body<span class="token operator">:</span> <span class="token punctuation">{</span>\n        mode<span class="token operator">:</span> <span class="token string">&#39;raw&#39;</span><span class="token punctuation">,</span>\n        raw<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token operator">:</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果需要传递 <code>header</code> 请求头信息，也可以在自定义的请求中添加：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loginRequest <span class="token operator">=</span> <span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span>\n    header<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&#39;Key1 : Value1&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;Key2 : Value2&#39;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="测试脚本" tabindex="-1"><a class="header-anchor" href="#测试脚本" aria-hidden="true">#</a> 测试脚本</h2>',21),R=(0,t.Uk)("文档："),C={href:"https://go.pstmn.io/docs-test-scripts/",target:"_blank",rel:"noopener noreferrer"},E=(0,t.Uk)("Tests"),O=(0,t.uE)('<p>在 <code>Tests</code> 中可以为请求编写测试脚本，是在<strong>请求完成后</strong>执行的操作。和 <code>Pre-request Script</code> 相对。</p><p>这里模拟场景：由于 token 具有时效性，一段时间过后 token 就会失效然后就需要重新调用 login 接口拿到新的token，在 <code>Tests</code> 中使用脚本将获取的 token 放入 <code>Collection</code> 的变量中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span>collectionVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN&quot;</span><span class="token punctuation">,</span>pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011130542669.png" alt="image-20211011130542669"></p>',4),N=(0,t.Uk)("然后其他接口通过 "),z=(0,t.Uk)(" 就可以使用 token 了"),K=(0,t._)("h3",{id:"断言",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#断言","aria-hidden":"true"},"#"),(0,t.Uk)(" 断言")],-1),V=(0,t.Uk)("官方文档："),W={href:"https://learning.postman.com/docs/writing-scripts/script-references/test-examples/",target:"_blank",rel:"noopener noreferrer"},D=(0,t.Uk)("Test script examples"),J=(0,t.uE)('<p>断言，就是对预期结果与实际结果进行对比，如果一致，则用例通过；如果不一致，断言失败，用例失败。</p><p>Postman 断言的一些特点：</p><ul><li>断言编写位置：Tests 标签</li><li>断言所用语言：JavaScript</li><li>断言执行顺序：在响应体数据返回后执行</li><li>断言执行结果查看：Test Results</li></ul><p>Postman 已经给我们内置了一些常用的断言 。用的时候，只需从 Tests 选项卡右侧点击 <strong>SNIPPETS</strong> 其中一个断言，就会在文本框中自动生成对应断言代码块 。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/software/image-20211011145112432.png" alt="image-20211011145112432"></p><blockquote><p><code>pm</code> 是 Postman 的主要对象，一般通过它来调用函数、数据等。</p></blockquote><p>范例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 判断请求返回的状态码为200。推荐用全等(===)，确保类型和值都一致</span>\ntests<span class="token punctuation">[</span><span class="token string">&#39;Status code is 200&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseCode<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">;</span>\n<span class="token comment">// 判断请求返回的时间小于200ms</span>\ntests<span class="token punctuation">[</span><span class="token string">&#39;Response time is less than 200ms&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseTime <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> \n<span class="token comment">// response body 是否包含 xxx。只要有指定关键字就行，在哪、有几个等都不管 </span>\ntests<span class="token punctuation">[</span><span class="token string">&#39;Body matches string&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// response header 中是否包含 Content-Type</span>\ntests<span class="token punctuation">[</span><span class="token string">&#39;Content-Type is present&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> postman<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><p>对返回的 json 数据进行断言</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">23</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>1、先获取到返回的 json 数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2、断言 status 返回的值为 1</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>tests<span class="token punctuation">[</span><span class="token string">&quot;判断返回的status返回为1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> jsonData<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3、断言 data 中第一个元素中 name 的值为 zhangsan</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>tests<span class="token punctuation">[</span><span class="token string">&quot;data第一个元素中的name值正确&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> jsonData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4、判断数据返回类型</p><p>类型种类：number 、string 、object 、array 、boolean 、undefind</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>tests<span class="token punctuation">[</span><span class="token string">&quot;判断data下第一个元素中id的返回类型为number&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>5、判断返回数据中是否存在某个元素。只要有指定关键字就行，在哪、有几个等都不管 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>tests<span class="token punctuation">[</span><span class="token string">&quot;判断返回的元素中带有status&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><p>其他的操作：</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>pm.environment.set(&quot;variable_key&quot;,&quot;variable_value&quot;);</td><td>设置环境变量</td></tr><tr><td>pm.environment.get(&quot;variable_key&quot;);</td><td>获得环境变量</td></tr><tr><td>pm.environment.unset(&quot;variable_key&quot;);</td><td>删除一个环境变量</td></tr><tr><td>pm.globals.set(&quot;variable_key&quot;, &quot;variable_value&quot;);</td><td>设置全局变量</td></tr><tr><td>pm.globals.get(&quot;variable_key&quot;);</td><td>获得全局变量</td></tr><tr><td>pm.globals.unset(&quot;variable_key&quot;);</td><td>删除一个全局变量</td></tr></tbody></table>',25),G={},H=(0,a(3744).Z)(G,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("blockquote",null,[(0,t._)("p",null,[o,(0,t._)("a",c,[l,(0,t.Wm)(a)])])]),u,(0,t._)("p",null,[i,(0,t._)("code",null,(0,p.zw)(n.variable),1),r]),k,(0,t._)("blockquote",null,[(0,t._)("p",null,[d,(0,t._)("a",m,[g,(0,t.Wm)(a)])])]),b,(0,t._)("blockquote",null,[(0,t._)("p",null,[v,h,q,(0,t._)("a",f,[j,(0,t.Wm)(a)])])]),_,x,y,(0,t._)("p",null,[w,(0,t._)("a",P,[T,(0,t.Wm)(a)]),U]),S,(0,t._)("blockquote",null,[(0,t._)("p",null,[R,(0,t._)("a",C,[E,(0,t.Wm)(a)])])]),O,(0,t._)("p",null,[N,(0,t._)("code",null,(0,p.zw)(n.TOKEN),1),z]),K,(0,t._)("blockquote",null,[(0,t._)("p",null,[V,(0,t._)("a",W,[D,(0,t.Wm)(a)])])]),J],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);