"use strict";(self.webpackChunkatips=self.webpackChunkatips||[]).push([[2807],{2323:(e,a,t)=>{t.r(a),t.d(a,{data:()=>i});const i={key:"v-7f38cf6d",path:"/java/container/collection/java-collection-overview.html",title:"集合类体系",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Collection",slug:"collection",children:[{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Queue",slug:"queue",children:[]}]},{level:2,title:"Map",slug:"map",children:[{level:3,title:"TreeMap",slug:"treemap",children:[]},{level:3,title:"HashMap",slug:"hashmap",children:[]},{level:3,title:"HashTable",slug:"hashtable",children:[]},{level:3,title:"LinkedHashMap",slug:"linkedhashmap",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"java/container/collection/java-collection-overview.md",git:{updatedTime:1719836412e3,contributors:[{name:"Tianci.Xiong",email:"tiancixiong@163.com",commits:3},{name:"TianCi.Xiong",email:"tiancixiong@163.com",commits:1}]}}},5972:(e,a,t)=>{t.r(a),t.d(a,{default:()=>u});var i=t(6252);const r=(0,i.uE)('<h1 id="集合类体系" tabindex="-1"><a class="header-anchor" href="#集合类体系" aria-hidden="true">#</a> 集合类体系</h1><p>程序开发中数据结构可以分为这八类：数组(Array)、链表(Linked)、栈(Stack)、队列(Queue)、散列表(Hash)、树(Tree)、堆(Heap)、图(Graph)。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/image-20211021102338258.png" alt="image-20211021102338258"></p><p>其中，数组、链表、散列表、树是程序开发直接或者间接用到的最多的。相关的对应实现类可以包括如下：</p><table><thead><tr><th>类型</th><th>实现</th></tr></thead><tbody><tr><td>数组</td><td>ArrayList</td></tr><tr><td>链表</td><td>LinkedList</td></tr><tr><td>树</td><td>2-3 树、红黑树</td></tr><tr><td>散列表</td><td>HashMap</td></tr><tr><td>栈</td><td>Stack</td></tr><tr><td>队列</td><td>Queue、Deque</td></tr></tbody></table><hr><p><code>java.util</code> 库提供了一套相当完整的集合类（collection classes）来实现这些结构，其中基本的类 型有 List 、Set 、Queue 和 Map。这些类型也被称作容器类（container classes）。</p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/java_collections_overview.png" alt="java_collections_overview"></p><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/collection-classes.jpg" alt="collection-classes"></p><p>容器主要包括 <em>Collection</em> 和 <em>Map</em> 两种，<em>Collection</em> 存储着对象的集合，而 <em>Map</em> 存储着键值对(两个对象)的映射表。</p><ol><li>集合(<em>Collection</em>)：一个独立元素的序列，这些元素都服从一条或多条规则。<em>List</em> 必须以插入 的顺序保存元素，<em>Set</em> 不能包含重复元素，<em>Queue</em> 按照排队规则来确定对象产生的顺序（通常与 它们被插入的顺序相同）；</li><li>映射(<em>Map</em>)：一组成对的 <strong>键值对</strong> 对象，允许使用键来查找值。<em>ArrayList</em> 使用数字来查找对 象，因此在某种意义上讲，它是将数字和对象关联在一起。<em>Map</em> 允许我们使用一个对象来查找另 一个对象，它也被称作关联数组（associative array），因为它将对象和其它对象关联在一起；或 者称作字典（dictionary），因为可以使用一个键对象来查找值对象，就像在字典中使用单词查找 定义一样。</li></ol><h2 id="collection" tabindex="-1"><a class="header-anchor" href="#collection" aria-hidden="true">#</a> Collection</h2><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/java-collection-hierarchy.jpeg" alt="java-collection-hierarchy"></p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><h4 id="hashset" tabindex="-1"><a class="header-anchor" href="#hashset" aria-hidden="true">#</a> HashSet</h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p><h4 id="linkedhashset" tabindex="-1"><a class="header-anchor" href="#linkedhashset" aria-hidden="true">#</a> LinkedHashSet</h4><p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p><h4 id="treeset" tabindex="-1"><a class="header-anchor" href="#treeset" aria-hidden="true">#</a> TreeSet</h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p>',20),h=(0,i.Uk)("关于算法时间复杂度查看："),l={href:"https://blog.csdn.net/dazhaoDai/article/details/81631195",target:"_blank",rel:"noopener noreferrer"},n=(0,i.Uk)("算法复杂度"),d=(0,i.uE)('<h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3><h4 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist" aria-hidden="true">#</a> ArrayList</h4><p>基于动态数组实现，支持随机访问。</p><h4 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h4><p>和 ArrayList 类似，但它是线程安全的。</p><h4 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist" aria-hidden="true">#</a> LinkedList</h4><p>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> Queue</h3><h4 id="linkedlist-1" tabindex="-1"><a class="header-anchor" href="#linkedlist-1" aria-hidden="true">#</a> LinkedList</h4><p>可以用它来实现双向队列。</p><h4 id="priorityqueue" tabindex="-1"><a class="header-anchor" href="#priorityqueue" aria-hidden="true">#</a> PriorityQueue</h4><p>基于堆结构实现，可以用它来实现优先队列。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p><img src="//gcore.jsdelivr.net/gh/tiancixiong/atips@img-230529/images/java/container/collection/map-class-hierarchy.jpg" alt="map-class-hierarchy"></p><h3 id="treemap" tabindex="-1"><a class="header-anchor" href="#treemap" aria-hidden="true">#</a> TreeMap</h3><p>基于红黑树实现。</p><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h3><p>基于哈希表实现。</p><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable" aria-hidden="true">#</a> HashTable</h3><p>和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 <code>ConcurrentHashMap</code> 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p><h3 id="linkedhashmap" tabindex="-1"><a class="header-anchor" href="#linkedhashmap" aria-hidden="true">#</a> LinkedHashMap</h3><p>使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',23),s={href:"https://github.com/CarpenterLee/JCFInternals",target:"_blank",rel:"noopener noreferrer"},c=(0,i.Uk)("JCFInternals"),o=(0,i.Uk)(" - GitHub@CarpenterLee"),p={},u=(0,t(3744).Z)(p,[["render",function(e,a){const t=(0,i.up)("OutboundLink");return(0,i.wg)(),(0,i.iD)(i.HY,null,[r,(0,i._)("blockquote",null,[(0,i._)("p",null,[h,(0,i._)("a",l,[n,(0,i.Wm)(t)])])]),d,(0,i._)("ul",null,[(0,i._)("li",null,[(0,i._)("a",s,[c,(0,i.Wm)(t)]),o])])],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[t,i]of a)e[t]=i;return e}}}]);